


import com.itextpdf.text.*;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author IT
 */
public class main_page extends javax.swing.JFrame {

    int season_id = 0;
    int menu_select = 0;
    int admin_select = 0;
    int total_purchase_bags = 0;
    float total_purchase_weight = 0;
    int total_lift_bags = 0;
    float total_lift_weight = 0;
    int total_bales = 0;
    int total_loose = 0;
    int balance_wheat_bags = 0;
    float balance_wheat_qtl = 0;

    int balance_bardana = 0;

    /**
     * Creates new form main_page
     */
    public main_page() {
        initComponents();

        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screensize.width, screensize.height);
        setExtendedState(JFrame.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bg_report = new javax.swing.ButtonGroup();
        dialog_admin = new javax.swing.JDialog();
        panel_admin1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        panel_admin_entry = new javax.swing.JPanel();
        lbl_admin_header = new javax.swing.JLabel();
        lbl_name = new javax.swing.JLabel();
        lbl_truck_no4 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        jPanel40 = new javax.swing.JPanel();
        btn_admin_entry = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();
        lbl_godown = new javax.swing.JLabel();
        txt_godown = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_admin = new javax.swing.JTable();
        dialog_update = new javax.swing.JDialog();
        panel_data_entry1 = new javax.swing.JPanel();
        lbl_update_header = new javax.swing.JLabel();
        lbl_update_date = new javax.swing.JLabel();
        lbl_update_bardana_type = new javax.swing.JLabel();
        lbl_update_firm_name = new javax.swing.JLabel();
        lbl_update_bags = new javax.swing.JLabel();
        lbl_update_weight = new javax.swing.JLabel();
        lbl_update_loose = new javax.swing.JLabel();
        lbl_update_truck_no = new javax.swing.JLabel();
        lbl_update_godown_name = new javax.swing.JLabel();
        cb_update_bardana = new javax.swing.JComboBox<>();
        cb_update_firm = new javax.swing.JComboBox<>();
        txt_update_bags = new javax.swing.JTextField();
        txt_update_weight = new javax.swing.JTextField();
        txt_update_loose = new javax.swing.JTextField();
        txt_update_truck = new javax.swing.JTextField();
        jPanel39 = new javax.swing.JPanel();
        btn_update = new javax.swing.JButton();
        btn_delete_entry = new javax.swing.JButton();
        cb_update_godown = new javax.swing.JComboBox<>();
        lbl_update_bales = new javax.swing.JLabel();
        txt_update_bales = new javax.swing.JTextField();
        lbl_update_sno = new javax.swing.JLabel();
        txt_update_sno = new javax.swing.JTextField();
        dt_update_date = new com.toedter.calendar.JDateChooser();
        dialog_shortage = new javax.swing.JDialog();
        jScrollPane7 = new javax.swing.JScrollPane();
        table_shortage = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        cb_shortage_godown = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cb_shortage_firm = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cb_shortage_bardana = new javax.swing.JComboBox<>();
        jButton20 = new javax.swing.JButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        dialog_pg_doc = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton44 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        btn_pg4_date = new javax.swing.JButton();
        btn_pg4_complete = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        btn_pg9_complete = new javax.swing.JButton();
        btn_pg9_monthly = new javax.swing.JButton();
        btn_pg39 = new javax.swing.JButton();
        btn_pg39a = new javax.swing.JButton();
        btn_pg86 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_pg4 = new javax.swing.JTable();
        lbl_total_pg4 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cb_pg = new javax.swing.JComboBox<>();
        dt_pg4 = new com.toedter.calendar.JDateChooser();
        mt_month = new com.toedter.calendar.JMonthChooser();
        yr = new com.toedter.calendar.JYearChooser();
        jButton43 = new javax.swing.JButton();
        jButton45 = new javax.swing.JButton();
        dialog_consolidate = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jButton46 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        btn_pg4_date1 = new javax.swing.JButton();
        btn_pg4_complete1 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        btn_pg9_complete1 = new javax.swing.JButton();
        btn_pg9_monthly1 = new javax.swing.JButton();
        btn_pg40 = new javax.swing.JButton();
        btn_pg39a1 = new javax.swing.JButton();
        btn_pg87 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_pg5 = new javax.swing.JTable();
        lbl_total_pg5 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jButton47 = new javax.swing.JButton();
        jButton48 = new javax.swing.JButton();
        panel_menu = new javax.swing.JPanel();
        menu_purchase = new javax.swing.JButton();
        menu_lifting = new javax.swing.JButton();
        menu_rec_bardana = new javax.swing.JButton();
        menu_issue_bardana = new javax.swing.JButton();
        menu_firm_reports = new javax.swing.JButton();
        menu_pg_reports = new javax.swing.JButton();
        menu_consolidated = new javax.swing.JButton();
        menu_shortage = new javax.swing.JButton();
        menu_change_mandi = new javax.swing.JButton();
        menu_admin = new javax.swing.JButton();
        menu_update = new javax.swing.JButton();
        panel_total_detail = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        txt_total_purchase = new javax.swing.JTextField();
        txt_total_lift = new javax.swing.JTextField();
        txt_total_balance = new javax.swing.JTextField();
        txt_total_bardana = new javax.swing.JTextField();
        txt_total_bar_balance = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        panel_main = new javax.swing.JPanel();
        panel_main_empty = new javax.swing.JPanel();
        panel_empty = new javax.swing.JPanel();
        panel_purchase = new javax.swing.JPanel();
        panel_purchase_entry = new javax.swing.JPanel();
        lbl_entry_header = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        lbl_bardana_type = new javax.swing.JLabel();
        lbl_firm_name = new javax.swing.JLabel();
        lbl_bags = new javax.swing.JLabel();
        lbl_weight = new javax.swing.JLabel();
        lbl_loose = new javax.swing.JLabel();
        lbl_truck_no = new javax.swing.JLabel();
        lbl_godown_name = new javax.swing.JLabel();
        cb_bardana_type = new javax.swing.JComboBox<>();
        cb_firm_name = new javax.swing.JComboBox<>();
        txt_bags = new javax.swing.JTextField();
        txt_weight = new javax.swing.JTextField();
        txt_loose = new javax.swing.JTextField();
        txt_truck_no = new javax.swing.JTextField();
        jPanel38 = new javax.swing.JPanel();
        btn_add_new_entry = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        cb_godown = new javax.swing.JComboBox<>();
        lbl_bales = new javax.swing.JLabel();
        txt_bales = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        dt_date = new com.toedter.calendar.JDateChooser();
        jPanel13 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_reports = new javax.swing.JLabel();
        panel_radiobutton = new javax.swing.JPanel();
        rb_datewise = new javax.swing.JRadioButton();
        rb_firmwise = new javax.swing.JRadioButton();
        panel_date = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        dt_date_report = new com.toedter.calendar.JDateChooser();
        btn_datewise = new javax.swing.JButton();
        panel_firm = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cb_report_firm = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cb_report_bardana = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cb_report_godown = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cb_report_sender = new javax.swing.JComboBox<>();
        panel_table = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_data_entry = new javax.swing.JTable();
        panel_empty7 = new javax.swing.JPanel();
        panel_empty8 = new javax.swing.JPanel();

        dialog_admin.setModal(true);

        panel_admin1.setLayout(new java.awt.GridBagLayout());

        jButton4.setText("Firms");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Bardana");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Godown");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panel_admin1.add(jPanel6, gridBagConstraints);

        panel_admin_entry.setBackground(java.awt.Color.gray);
        panel_admin_entry.setLayout(new java.awt.GridBagLayout());

        lbl_admin_header.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbl_admin_header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_admin_header.setText("New Purchase Entry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 20, 0);
        panel_admin_entry.add(lbl_admin_header, gridBagConstraints);

        lbl_name.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_name.setText("Bags");
        lbl_name.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_admin_entry.add(lbl_name, gridBagConstraints);

        lbl_truck_no4.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_truck_no4.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_admin_entry.add(lbl_truck_no4, gridBagConstraints);

        txt_name.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_name.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_nameFocusGained(evt);
            }
        });
        txt_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_nameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nameKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_admin_entry.add(txt_name, gridBagConstraints);

        jPanel40.setBackground(java.awt.Color.gray);
        jPanel40.setLayout(new java.awt.GridBagLayout());

        btn_admin_entry.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_admin_entry.setText("Add");
        btn_admin_entry.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_admin_entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_admin_entryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel40.add(btn_admin_entry, gridBagConstraints);

        jButton39.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton39.setText("Reset");
        jButton39.setPreferredSize(new java.awt.Dimension(100, 25));
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton39ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel40.add(jButton39, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_admin_entry.add(jPanel40, gridBagConstraints);

        lbl_godown.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_godown.setText("Filling");
        lbl_godown.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_admin_entry.add(lbl_godown, gridBagConstraints);

        txt_godown.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_godown.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_godown.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_godownKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_admin_entry.add(txt_godown, gridBagConstraints);

        jPanel8.setBackground(java.awt.Color.gray);
        jPanel8.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        panel_admin_entry.add(jPanel8, gridBagConstraints);

        table_admin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(table_admin);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(panel_admin_entry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel_admin_entry, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        panel_admin1.add(jPanel7, gridBagConstraints);

        javax.swing.GroupLayout dialog_adminLayout = new javax.swing.GroupLayout(dialog_admin.getContentPane());
        dialog_admin.getContentPane().setLayout(dialog_adminLayout);
        dialog_adminLayout.setHorizontalGroup(
            dialog_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
            .addGroup(dialog_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialog_adminLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panel_admin1, javax.swing.GroupLayout.PREFERRED_SIZE, 1200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        dialog_adminLayout.setVerticalGroup(
            dialog_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
            .addGroup(dialog_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialog_adminLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panel_admin1, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        panel_data_entry1.setBackground(java.awt.Color.gray);
        panel_data_entry1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_data_entry1.setLayout(new java.awt.GridBagLayout());

        lbl_update_header.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbl_update_header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_update_header.setText("Update Section");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 20, 0);
        panel_data_entry1.add(lbl_update_header, gridBagConstraints);

        lbl_update_date.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_date.setText("Date");
        lbl_update_date.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_date, gridBagConstraints);

        lbl_update_bardana_type.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_bardana_type.setText("Bardana Type");
        lbl_update_bardana_type.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_bardana_type, gridBagConstraints);

        lbl_update_firm_name.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_firm_name.setText("Firm Name");
        lbl_update_firm_name.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_firm_name, gridBagConstraints);

        lbl_update_bags.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_bags.setText("Bags");
        lbl_update_bags.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_bags, gridBagConstraints);

        lbl_update_weight.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_weight.setText("Weight");
        lbl_update_weight.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_weight, gridBagConstraints);

        lbl_update_loose.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_loose.setText("Loose");
        lbl_update_loose.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_loose, gridBagConstraints);

        lbl_update_truck_no.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_truck_no.setText("Truck No.");
        lbl_update_truck_no.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_truck_no, gridBagConstraints);

        lbl_update_godown_name.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_godown_name.setText("Godown");
        lbl_update_godown_name.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_godown_name, gridBagConstraints);

        cb_update_bardana.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cb_update_bardana.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_update_bardana.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_update_bardana.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_update_bardanaItemStateChanged(evt);
            }
        });
        cb_update_bardana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_update_bardanaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(cb_update_bardana, gridBagConstraints);

        cb_update_firm.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cb_update_firm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_update_firm.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(cb_update_firm, gridBagConstraints);

        txt_update_bags.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_update_bags.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_update_bags.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_update_bagsFocusGained(evt);
            }
        });
        txt_update_bags.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_update_bagsKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_update_bagsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_update_bagsKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(txt_update_bags, gridBagConstraints);

        txt_update_weight.setEditable(false);
        txt_update_weight.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_update_weight.setEnabled(false);
        txt_update_weight.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(txt_update_weight, gridBagConstraints);

        txt_update_loose.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_update_loose.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_update_loose.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_update_looseKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(txt_update_loose, gridBagConstraints);

        txt_update_truck.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_update_truck.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_update_truck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_update_truckKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(txt_update_truck, gridBagConstraints);

        jPanel39.setLayout(new java.awt.GridBagLayout());

        btn_update.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_update.setText("Update");
        btn_update.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel39.add(btn_update, gridBagConstraints);

        btn_delete_entry.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_delete_entry.setText("Delete");
        btn_delete_entry.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_delete_entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete_entryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel39.add(btn_delete_entry, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(jPanel39, gridBagConstraints);

        cb_update_godown.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cb_update_godown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_update_godown.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(cb_update_godown, gridBagConstraints);

        lbl_update_bales.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_update_bales.setText("Bales");
        lbl_update_bales.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_bales, gridBagConstraints);

        txt_update_bales.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_update_bales.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_update_bales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_update_balesKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_data_entry1.add(txt_update_bales, gridBagConstraints);

        lbl_update_sno.setText("Txn no.");
        lbl_update_sno.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        panel_data_entry1.add(lbl_update_sno, gridBagConstraints);

        txt_update_sno.setEnabled(false);
        txt_update_sno.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        panel_data_entry1.add(txt_update_sno, gridBagConstraints);

        dt_update_date.setDateFormatString("dd-MMM-yy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        panel_data_entry1.add(dt_update_date, gridBagConstraints);

        javax.swing.GroupLayout dialog_updateLayout = new javax.swing.GroupLayout(dialog_update.getContentPane());
        dialog_update.getContentPane().setLayout(dialog_updateLayout);
        dialog_updateLayout.setHorizontalGroup(
            dialog_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
            .addGroup(dialog_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialog_updateLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panel_data_entry1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        dialog_updateLayout.setVerticalGroup(
            dialog_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
            .addGroup(dialog_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialog_updateLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panel_data_entry1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        dialog_shortage.getContentPane().setLayout(new java.awt.GridBagLayout());

        table_shortage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(table_shortage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 577;
        gridBagConstraints.ipady = 393;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dialog_shortage.getContentPane().add(jScrollPane7, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("SAVE SHORTAGE");
        jButton3.setMinimumSize(new java.awt.Dimension(150, 25));
        jButton3.setPreferredSize(new java.awt.Dimension(200, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        dialog_shortage.getContentPane().add(jButton3, gridBagConstraints);

        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jRadioButton3.setText("ADD SHORTAGE");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        jPanel14.add(jRadioButton3);

        jRadioButton4.setText("VIEW SHORTAGE");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });
        jPanel14.add(jRadioButton4);

        jLabel7.setText("GODOWN");
        jPanel14.add(jLabel7);

        cb_shortage_godown.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel14.add(cb_shortage_godown);

        jLabel12.setText("FIRM NAME");
        jPanel14.add(jLabel12);

        cb_shortage_firm.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel14.add(cb_shortage_firm);

        jLabel8.setText("BARDANA TYPE");
        jPanel14.add(jLabel8);

        cb_shortage_bardana.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel14.add(cb_shortage_bardana);

        jButton20.setText("SEARCH");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel14.add(jButton20);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        dialog_shortage.getContentPane().add(jPanel14, gridBagConstraints);

        jRadioButton2.setText("jRadioButton2");
        dialog_shortage.getContentPane().add(jRadioButton2, new java.awt.GridBagConstraints());

        dialog_pg_doc.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialog_pg_doc.setBackground(new java.awt.Color(102, 255, 255));
        dialog_pg_doc.setBounds(new java.awt.Rectangle(0, 0, 300, 500));
        dialog_pg_doc.setModal(true);
        dialog_pg_doc.setResizable(false);
        dialog_pg_doc.getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        dialog_pg_doc.getContentPane().add(jPanel3, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setText("PG REPORTS");
        jPanel5.add(jLabel1);

        jButton44.setText("jButton44");
        jButton44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton44ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton44);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        dialog_pg_doc.getContentPane().add(jPanel5, gridBagConstraints);

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btn_pg4_date.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg4_date.setText("PG4(DATE)");
        btn_pg4_date.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg4_date.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg4_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg4_dateActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg4_date);

        btn_pg4_complete.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg4_complete.setText("PG4(ALL)");
        btn_pg4_complete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg4_complete.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg4_complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg4_completeActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg4_complete);

        jButton12.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton12.setText(" PG9( DATE)");
        jButton12.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton12.setPreferredSize(new java.awt.Dimension(90, 25));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton12);

        btn_pg9_complete.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg9_complete.setText("PG9(COMPLETE)");
        btn_pg9_complete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg9_complete.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg9_complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg9_completeActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg9_complete);

        btn_pg9_monthly.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg9_monthly.setText("PG9( MONTHLY)");
        btn_pg9_monthly.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg9_monthly.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg9_monthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg9_monthlyActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg9_monthly);

        btn_pg39.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg39.setText("PG39");
        btn_pg39.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg39.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg39ActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg39);

        btn_pg39a.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg39a.setText("PG39A");
        btn_pg39a.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg39a.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg39a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg39aActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg39a);

        btn_pg86.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg86.setText("PG86");
        btn_pg86.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg86.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg86.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg86ActionPerformed(evt);
            }
        });
        jPanel9.add(btn_pg86);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        dialog_pg_doc.getContentPane().add(jPanel9, gridBagConstraints);

        table_pg4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(table_pg4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 687;
        gridBagConstraints.ipady = 463;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dialog_pg_doc.getContentPane().add(jScrollPane2, gridBagConstraints);

        lbl_total_pg4.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lbl_total_pg4.setText("TOTAL PURCHASE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        dialog_pg_doc.getContentPane().add(lbl_total_pg4, gridBagConstraints);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("DATE");
        jLabel9.setPreferredSize(new java.awt.Dimension(70, 17));
        jPanel10.add(jLabel9);

        cb_pg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel10.add(cb_pg);
        jPanel10.add(dt_pg4);
        jPanel10.add(mt_month);
        jPanel10.add(yr);

        jButton43.setText("PG9 BARDANA");
        jButton43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton43ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton43);

        jButton45.setText("pg9 all (bardana wise)");
        jButton45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton45ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton45);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        dialog_pg_doc.getContentPane().add(jPanel10, gridBagConstraints);

        dialog_consolidate.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialog_consolidate.setBackground(new java.awt.Color(102, 255, 255));
        dialog_consolidate.setBounds(new java.awt.Rectangle(0, 0, 300, 500));
        dialog_consolidate.setModal(true);
        dialog_consolidate.setResizable(false);
        dialog_consolidate.getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        dialog_consolidate.getContentPane().add(jPanel4, gridBagConstraints);

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel10.setText("PG REPORTS");
        jPanel11.add(jLabel10);

        jButton46.setText("jButton44");
        jButton46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton46ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton46);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        dialog_consolidate.getContentPane().add(jPanel11, gridBagConstraints);

        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btn_pg4_date1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg4_date1.setText("PG4(DATE)");
        btn_pg4_date1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg4_date1.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg4_date1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg4_date1ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg4_date1);

        btn_pg4_complete1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg4_complete1.setText("PG4(ALL)");
        btn_pg4_complete1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg4_complete1.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg4_complete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg4_complete1ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg4_complete1);

        jButton13.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton13.setText(" PG9( DATE)");
        jButton13.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton13.setPreferredSize(new java.awt.Dimension(90, 25));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton13);

        btn_pg9_complete1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg9_complete1.setText("PG9(COMPLETE)");
        btn_pg9_complete1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg9_complete1.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg9_complete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg9_complete1ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg9_complete1);

        btn_pg9_monthly1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg9_monthly1.setText("PG9( MONTHLY)");
        btn_pg9_monthly1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg9_monthly1.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg9_monthly1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg9_monthly1ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg9_monthly1);

        btn_pg40.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg40.setText("PG39");
        btn_pg40.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg40.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg40ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg40);

        btn_pg39a1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg39a1.setText("PG39A");
        btn_pg39a1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg39a1.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg39a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg39a1ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg39a1);

        btn_pg87.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_pg87.setText("PG86");
        btn_pg87.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btn_pg87.setPreferredSize(new java.awt.Dimension(90, 25));
        btn_pg87.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pg87ActionPerformed(evt);
            }
        });
        jPanel12.add(btn_pg87);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        dialog_consolidate.getContentPane().add(jPanel12, gridBagConstraints);

        table_pg5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(table_pg5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 38;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 687;
        gridBagConstraints.ipady = 463;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dialog_consolidate.getContentPane().add(jScrollPane4, gridBagConstraints);

        lbl_total_pg5.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lbl_total_pg5.setText("TOTAL PURCHASE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        dialog_consolidate.getContentPane().add(lbl_total_pg5, gridBagConstraints);

        jPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButton47.setText("FirmWise Purchase");
        jButton47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton47ActionPerformed(evt);
            }
        });
        jPanel15.add(jButton47);

        jButton48.setText("FirmWise Lifting");
        jButton48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton48ActionPerformed(evt);
            }
        });
        jPanel15.add(jButton48);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        dialog_consolidate.getContentPane().add(jPanel15, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panel_menu.setBackground(new java.awt.Color(0, 0, 0));
        panel_menu.setMinimumSize(new java.awt.Dimension(1100, 33));
        panel_menu.setPreferredSize(new java.awt.Dimension(1200, 30));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
        flowLayout1.setAlignOnBaseline(true);
        panel_menu.setLayout(flowLayout1);

        menu_purchase.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_purchase.setText("Purchase");
        menu_purchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_purchase.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_purchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_purchaseActionPerformed(evt);
            }
        });
        panel_menu.add(menu_purchase);

        menu_lifting.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_lifting.setText("Lifting");
        menu_lifting.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_lifting.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_lifting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_liftingActionPerformed(evt);
            }
        });
        panel_menu.add(menu_lifting);

        menu_rec_bardana.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_rec_bardana.setText("Rec Bardana");
        menu_rec_bardana.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_rec_bardana.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_rec_bardana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_rec_bardanaActionPerformed(evt);
            }
        });
        panel_menu.add(menu_rec_bardana);

        menu_issue_bardana.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_issue_bardana.setText("bardana_issue");
        menu_issue_bardana.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_issue_bardana.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_issue_bardana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_issue_bardanaActionPerformed(evt);
            }
        });
        panel_menu.add(menu_issue_bardana);

        menu_firm_reports.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_firm_reports.setText("Firm Reports");
        menu_firm_reports.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_firm_reports.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_firm_reports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_firm_reportsActionPerformed(evt);
            }
        });
        panel_menu.add(menu_firm_reports);

        menu_pg_reports.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_pg_reports.setText("PG Reports");
        menu_pg_reports.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_pg_reports.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_pg_reports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_pg_reportsActionPerformed(evt);
            }
        });
        panel_menu.add(menu_pg_reports);

        menu_consolidated.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_consolidated.setText("Consolidated");
        menu_consolidated.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_consolidated.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_consolidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_consolidatedActionPerformed(evt);
            }
        });
        panel_menu.add(menu_consolidated);

        menu_shortage.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_shortage.setText("Shortage");
        menu_shortage.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_shortage.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_shortage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_shortageActionPerformed(evt);
            }
        });
        panel_menu.add(menu_shortage);

        menu_change_mandi.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_change_mandi.setText("Change Mandi");
        menu_change_mandi.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_change_mandi.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_change_mandi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_change_mandiActionPerformed(evt);
            }
        });
        panel_menu.add(menu_change_mandi);

        menu_admin.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_admin.setText("Admin");
        menu_admin.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_admin.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_adminActionPerformed(evt);
            }
        });
        panel_menu.add(menu_admin);

        menu_update.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        menu_update.setText("Update/Delete");
        menu_update.setMargin(new java.awt.Insets(0, 0, 0, 0));
        menu_update.setPreferredSize(new java.awt.Dimension(90, 20));
        menu_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_updateActionPerformed(evt);
            }
        });
        panel_menu.add(menu_update);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        getContentPane().add(panel_menu, gridBagConstraints);

        panel_total_detail.setBackground(new java.awt.Color(51, 102, 0));
        panel_total_detail.setAlignmentY(0.0F);
        panel_total_detail.setMinimumSize(new java.awt.Dimension(1200, 60));
        panel_total_detail.setPreferredSize(new java.awt.Dimension(1250, 60));
        panel_total_detail.setLayout(new java.awt.GridBagLayout());

        jPanel48.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        panel_total_detail.add(jPanel48, gridBagConstraints);

        txt_total_purchase.setEditable(false);
        txt_total_purchase.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_total_purchase.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_total_purchase.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        panel_total_detail.add(txt_total_purchase, gridBagConstraints);

        txt_total_lift.setEditable(false);
        txt_total_lift.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_total_lift.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_total_lift.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panel_total_detail.add(txt_total_lift, gridBagConstraints);

        txt_total_balance.setEditable(false);
        txt_total_balance.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_total_balance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_total_balance.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        panel_total_detail.add(txt_total_balance, gridBagConstraints);

        txt_total_bardana.setEditable(false);
        txt_total_bardana.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_total_bardana.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_total_bardana.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        panel_total_detail.add(txt_total_bardana, gridBagConstraints);

        txt_total_bar_balance.setEditable(false);
        txt_total_bar_balance.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_total_bar_balance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_total_bar_balance.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        panel_total_detail.add(txt_total_bar_balance, gridBagConstraints);

        jLabel58.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel58.setText("TOTAL PURCHASE");
        jLabel58.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel58.setMinimumSize(new java.awt.Dimension(150, 25));
        jLabel58.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panel_total_detail.add(jLabel58, gridBagConstraints);

        jLabel59.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel59.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel59.setText("BALANCE WHEAT");
        jLabel59.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel59.setMinimumSize(new java.awt.Dimension(150, 25));
        jLabel59.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panel_total_detail.add(jLabel59, gridBagConstraints);

        jLabel60.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel60.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel60.setText("BALANCE BARDANA");
        jLabel60.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel60.setMinimumSize(new java.awt.Dimension(150, 25));
        jLabel60.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        panel_total_detail.add(jLabel60, gridBagConstraints);

        jLabel61.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel61.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel61.setText("TOTAL LIFT");
        jLabel61.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel61.setMinimumSize(new java.awt.Dimension(150, 25));
        jLabel61.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panel_total_detail.add(jLabel61, gridBagConstraints);

        jLabel62.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel62.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel62.setText("BARDANA RECIEVED");
        jLabel62.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel62.setMinimumSize(new java.awt.Dimension(150, 25));
        jLabel62.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        panel_total_detail.add(jLabel62, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(panel_total_detail, gridBagConstraints);

        panel_main.setLayout(new java.awt.GridBagLayout());

        panel_main_empty.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout panel_emptyLayout = new javax.swing.GroupLayout(panel_empty);
        panel_empty.setLayout(panel_emptyLayout);
        panel_emptyLayout.setHorizontalGroup(
            panel_emptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        panel_emptyLayout.setVerticalGroup(
            panel_emptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );

        panel_main_empty.add(panel_empty, "card8");

        panel_purchase.setLayout(new java.awt.GridBagLayout());

        panel_purchase_entry.setBackground(java.awt.Color.gray);
        panel_purchase_entry.setLayout(new java.awt.GridBagLayout());

        lbl_entry_header.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbl_entry_header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_entry_header.setText("New Purchase Entry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 20, 0);
        panel_purchase_entry.add(lbl_entry_header, gridBagConstraints);

        lbl_date.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_date.setText("Date");
        lbl_date.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_date, gridBagConstraints);

        lbl_bardana_type.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_bardana_type.setText("Bardana Type");
        lbl_bardana_type.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_bardana_type, gridBagConstraints);

        lbl_firm_name.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_firm_name.setText("Firm Name");
        lbl_firm_name.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_firm_name, gridBagConstraints);

        lbl_bags.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_bags.setText("Bags");
        lbl_bags.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_bags, gridBagConstraints);

        lbl_weight.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_weight.setText("Weight");
        lbl_weight.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_weight, gridBagConstraints);

        lbl_loose.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_loose.setText("Loose");
        lbl_loose.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_loose, gridBagConstraints);

        lbl_truck_no.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_truck_no.setText("Truck No.");
        lbl_truck_no.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_truck_no, gridBagConstraints);

        lbl_godown_name.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_godown_name.setText("Godown Name");
        lbl_godown_name.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_godown_name, gridBagConstraints);

        cb_bardana_type.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cb_bardana_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_bardana_type.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_bardana_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_bardana_typeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(cb_bardana_type, gridBagConstraints);

        cb_firm_name.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cb_firm_name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_firm_name.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(cb_firm_name, gridBagConstraints);

        txt_bags.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_bags.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_bags.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_bagsFocusGained(evt);
            }
        });
        txt_bags.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_bagsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_bagsKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_bagsKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(txt_bags, gridBagConstraints);

        txt_weight.setEditable(false);
        txt_weight.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_weight.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(txt_weight, gridBagConstraints);

        txt_loose.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_loose.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_loose.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_looseKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(txt_loose, gridBagConstraints);

        txt_truck_no.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_truck_no.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_truck_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_truck_noKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(txt_truck_no, gridBagConstraints);

        jPanel38.setBackground(java.awt.Color.gray);
        jPanel38.setLayout(new java.awt.GridBagLayout());

        btn_add_new_entry.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btn_add_new_entry.setText("Add");
        btn_add_new_entry.setPreferredSize(new java.awt.Dimension(100, 25));
        btn_add_new_entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_new_entryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel38.add(btn_add_new_entry, gridBagConstraints);

        jButton37.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton37.setText("Reset");
        jButton37.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel38.add(jButton37, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(jPanel38, gridBagConstraints);

        cb_godown.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cb_godown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_godown.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(cb_godown, gridBagConstraints);

        lbl_bales.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbl_bales.setText("Bales");
        lbl_bales.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        panel_purchase_entry.add(lbl_bales, gridBagConstraints);

        txt_bales.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_bales.setPreferredSize(new java.awt.Dimension(150, 25));
        txt_bales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_balesKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 10);
        panel_purchase_entry.add(txt_bales, gridBagConstraints);

        jPanel1.setBackground(java.awt.Color.gray);
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        panel_purchase_entry.add(jPanel1, gridBagConstraints);

        dt_date.setDateFormatString("dd-MMM-yyyy");
        dt_date.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        panel_purchase_entry.add(dt_date, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        panel_purchase.add(panel_purchase_entry, gridBagConstraints);

        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel13.setPreferredSize(new java.awt.Dimension(300, 500));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbl_reports.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_reports.setText("View Report");
        jPanel2.add(lbl_reports);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel13.add(jPanel2, gridBagConstraints);

        panel_radiobutton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel_radiobutton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        bg_report.add(rb_datewise);
        rb_datewise.setText("DateWise");
        rb_datewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_datewiseActionPerformed(evt);
            }
        });
        panel_radiobutton.add(rb_datewise);

        bg_report.add(rb_firmwise);
        rb_firmwise.setText("FirmWise");
        rb_firmwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_firmwiseActionPerformed(evt);
            }
        });
        panel_radiobutton.add(rb_firmwise);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel13.add(panel_radiobutton, gridBagConstraints);

        panel_date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel_date.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Select Data");
        panel_date.add(jLabel2);

        dt_date_report.setDateFormatString("dd-MMM-yy");
        panel_date.add(dt_date_report);

        btn_datewise.setText("Search");
        btn_datewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_datewiseActionPerformed(evt);
            }
        });
        panel_date.add(btn_datewise);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel13.add(panel_date, gridBagConstraints);

        panel_firm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel_firm.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setText("Select Firm");
        panel_firm.add(jLabel3);

        cb_report_firm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panel_firm.add(cb_report_firm);

        jLabel4.setText("Select Bardana");
        panel_firm.add(jLabel4);

        cb_report_bardana.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panel_firm.add(cb_report_bardana);

        jLabel5.setText("Select Godown");
        panel_firm.add(jLabel5);

        cb_report_godown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panel_firm.add(cb_report_godown);

        jButton5.setText("Submit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        panel_firm.add(jButton5);

        jLabel6.setText("Select Sender");
        panel_firm.add(jLabel6);

        cb_report_sender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panel_firm.add(cb_report_sender);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel13.add(panel_firm, gridBagConstraints);

        panel_table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel_table.setLayout(new java.awt.GridBagLayout());

        table_data_entry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "null", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_data_entry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_data_entryMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                table_data_entryMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table_data_entry);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panel_table.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel13.add(panel_table, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        panel_purchase.add(jPanel13, gridBagConstraints);

        panel_main_empty.add(panel_purchase, "purchase");

        javax.swing.GroupLayout panel_empty7Layout = new javax.swing.GroupLayout(panel_empty7);
        panel_empty7.setLayout(panel_empty7Layout);
        panel_empty7Layout.setHorizontalGroup(
            panel_empty7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        panel_empty7Layout.setVerticalGroup(
            panel_empty7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );

        panel_main_empty.add(panel_empty7, "card8");

        javax.swing.GroupLayout panel_empty8Layout = new javax.swing.GroupLayout(panel_empty8);
        panel_empty8.setLayout(panel_empty8Layout);
        panel_empty8Layout.setHorizontalGroup(
            panel_empty8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        panel_empty8Layout.setVerticalGroup(
            panel_empty8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );

        panel_main_empty.add(panel_empty8, "card8");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        panel_main.add(panel_main_empty, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(panel_main, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menu_purchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_purchaseActionPerformed
        menu_select = 1;
        CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "purchase");
        purchase_menu();


        /*
        // panel_main.setVisible(true);
        lbl_entry_header.setText("NEW PURCHASE");
      
        //    load_aarthia();
        load_bardana_recieved();
        selection = 1;
        data_entry_view obj = new data_entry_view();
        TableModel model = obj.view_purchase(season_id);
        table_data_entry.setModel(model);

        //   table_bardana_purchase();
        //   DefaultTableModel tb = (DefaultTableModel) table_consolidate.getModel();
        //  tb.setColumnCount(0);
        //   table_purchase();
        // TODO add your handling code here:*/
    }//GEN-LAST:event_menu_purchaseActionPerformed

    private void menu_liftingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_liftingActionPerformed
        menu_select = 2;
        CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "purchase");
        lifting_menu();

        /*    lbl_entry_header.setText("NEW LIFTING");
        visibility_lifting();
        selection = 2;
        data_entry_view obj = new data_entry_view();
        TableModel model = obj.view_lifting(season_id);
        table_data_entry.setModel(model);
        load_godown();

        //  load_bardana_purchased();
        //  table_bardana_purchase();
        //   table_lifting();
        //   DefaultTableModel tb = (DefaultTableModel) table_consolidate.getModel();
        // tb.setColumnCount(0);*/
    }//GEN-LAST:event_menu_liftingActionPerformed

    private void menu_rec_bardanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_rec_bardanaActionPerformed
        menu_select = 3;
        CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "purchase");
        bardana_rec_menu();

        /*    visibility_bardana_rec();
        lbl_entry_header.setText("NEW BARDANA REC");
        load_bardana();
        selection = 3;
        data_entry_view obj = new data_entry_view();
        TableModel model = obj.view_bardana_recieve(season_id);
        table_data_entry.setModel(model);*/
    }//GEN-LAST:event_menu_rec_bardanaActionPerformed

    private void menu_issue_bardanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_issue_bardanaActionPerformed
        menu_select = 4;
        CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "purchase");
        bardana_issue_menu();

        /*
        //        panel_data_entries.setVisible(true);
        lbl_entry_header.setText("NEW BARDANA ISSUE");
        visibility_bardana_issue();
        selection = 4;
        //     load_aarthia();
        load_bardana_recieved();
        data_entry_view obj = new data_entry_view();
        TableModel model = obj.view_bardana_issue(season_id);
        table_data_entry.setModel(model);

        //   table_bardana_purchase();    */    // TODO add your handling code here:
    }//GEN-LAST:event_menu_issue_bardanaActionPerformed

    private void menu_firm_reportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_firm_reportsActionPerformed
        /*    CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "firm_reports");

        //    cb_report_bardana.setEnabled(false);
        //   cb_report_godown.setEnabled(false);
        //   btn_firmwise_purchase.setVisible(false);
        //   btn_firm_lifting.setVisible(false);
        //  btn_firm_bardana.setVisible(false);
        //  btn_firm_pdf.setEnabled(false);
        //     dialog_firm.setSize(screensize.width, screensize.height);
        //  dialog_firm.setLocationRelativeTo(panel_main);
        //   dialog_firm.setVisible(true);
        // dialog_firm.// TODO add your handling code here:*/
    }//GEN-LAST:event_menu_firm_reportsActionPerformed

    private void menu_pg_reportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_pg_reportsActionPerformed
                dialog_pg_doc.setSize(800, 800);
             dialog_pg_doc.setLocationRelativeTo(null);
           dialog_pg_doc.setVisible(true);
   
        
        /*    CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "pg_reports");

        //  cb_pg.removeAllItems();
        //   stock_report obj = new stock_report();
        //  ResultSet rs = obj.filling(season_id);
        /*  try {
            while (rs.next()) {
                cb_pg.addItem(rs.getString(1));
            }

            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_menu_pg_reportsActionPerformed

    private void menu_consolidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_consolidatedActionPerformed
        /*    CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "consolidated");*/

    }//GEN-LAST:event_menu_consolidatedActionPerformed

    private void menu_shortageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_shortageActionPerformed
        dialog_shortage.setSize(1000, 500);
        dialog_shortage.setLocationRelativeTo(null);
        dialog_shortage.setVisible(true);
        /*      CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "shortage");
        try {
            Connection conn = connectdb.getConn();
            String query = "select sum(purchase.bags),sum(purchase.weight),sum(lifting.bags),sum(lifting.weight) from purchase left join lifting on purchase.season_id=lifting.season_id where purchase.season_id=?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                total_purchase_bags = rs.getInt(1);
                total_purchase_qtl = rs.getFloat(2);
                total_lift_bags = rs.getInt(3);
                total_lift_qtl = rs.getFloat(4);

            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        txt_total_purchase.setText(String.valueOf(total_purchase_bags + "  Bags   " + total_purchase_qtl + " Qtl"));
        txt_total_lift.setText(String.valueOf(total_lift_bags + "  Bags   " + total_lift_qtl + " Qtl"));
         */
    }//GEN-LAST:event_menu_shortageActionPerformed

    private void menu_change_mandiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_change_mandiActionPerformed

        select_mandi obj = new select_mandi();
        this.setVisible(false);
        this.dispose();
        obj.setSize(400, 300);
        obj.setLocationRelativeTo(null);
        obj.setVisible(true);

    }//GEN-LAST:event_menu_change_mandiActionPerformed

    private void menu_adminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_adminActionPerformed
        int admin_select = 0;
        panel_admin_entry.setVisible(false);
        dialog_admin.setSize(500, 500);
        dialog_admin.setLocationRelativeTo(null);
        dialog_admin.setVisible(true);


        /*
        lbl1.setVisible(false);
        lbl2.setVisible(false);
        lbl3.setVisible(false);
        lbl4.setVisible(false);
        txt1.setVisible(false);
        txt2.setVisible(false);
        txt3.setVisible(false);
        txt4.setVisible(false);
        ad_btn_add.setVisible(false);
        ad_btn_cancel.setVisible(false);
        lbl_admin_header.setText("ADD NEW ITEM");

        admin.setSize(682, 435);
        admin.setLocationRelativeTo(null);
        //  obj.setVisible(true);
        admin.setVisible(true);

        // TODO add your handling code here:*/
    }//GEN-LAST:event_menu_adminActionPerformed

    private void menu_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_updateActionPerformed
        /*      CardLayout card = (CardLayout) panel_main_empty.getLayout();
        card.show(panel_main_empty, "update");

        //  dialog_modify.setSize(800, 800);
        //  dialog_modify.setLocationRelativeTo(null);
        //  dialog_modify.setVisible(true);
        //  modify_panel.setVisible(false);
        // TODO add your handling code here:*/
    }//GEN-LAST:event_menu_updateActionPerformed

    private void cb_bardana_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_bardana_typeItemStateChanged
        txt_bags.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_cb_bardana_typeItemStateChanged

    private void txt_bagsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_bagsFocusGained

    }//GEN-LAST:event_txt_bagsFocusGained

    private void txt_bagsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_bagsKeyPressed

    }//GEN-LAST:event_txt_bagsKeyPressed

    private void txt_bagsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_bagsKeyReleased
        if (txt_bags.getText().equals("")) {
            txt_weight.setText("0");
        } else {
            float filling = load_filling(cb_bardana_type.getSelectedItem().toString());
            int bags = Integer.parseInt(txt_bags.getText());
            float total = (filling * bags) / 100;
            txt_weight.setText(String.valueOf(total));
        }
    }//GEN-LAST:event_txt_bagsKeyReleased

    private void txt_bagsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_bagsKeyTyped
        /*   char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }

        if (cb_bardana_type.getSelectedItem().toString().equals("PLEASE SELECT")) {
            cb_bardana_type.requestFocus();
            evt.consume();
            JOptionPane.showMessageDialog(null, "PLEASE SELECT BARDANA FIRST");

        }*/

    }//GEN-LAST:event_txt_bagsKeyTyped

    private void txt_looseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_looseKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }         // TODO add your handling code here:
    }//GEN-LAST:event_txt_looseKeyTyped

    private void txt_truck_noKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_truck_noKeyReleased
        int position = txt_truck_no.getCaretPosition();
        txt_truck_no.setText(txt_truck_no.getText().toUpperCase());
        txt_truck_no.setCaretPosition(position);                // TODO add your handling code here:
    }//GEN-LAST:event_txt_truck_noKeyReleased

    private void btn_add_new_entryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_new_entryActionPerformed
        if (menu_select == 1) {
            //   JOptionPane.showMessageDialog(null, "PURCHASE ENTRY");
            insert_purchase();

        } else if (menu_select == 2) {
            // JOptionPane.showMessageDialog(null, "LIFTING ENTRY");
            insert_lifting();
        } else if (menu_select == 3) {

            //  JOptionPane.showMessageDialog(null, "BARDANA REC ENTRY");
            insert_recieve_bardana();

        } else if (menu_select == 4) {
            insert_issue_bardana();

            ///    JOptionPane.showMessageDialog(null, "BARDANA issue ENTRY");
        }

        //  total_mandi_purchase();
    }//GEN-LAST:event_btn_add_new_entryActionPerformed

    private void txt_balesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_balesKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txt_balesKeyTyped

    private void rb_datewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_datewiseActionPerformed

        //  panel_table.setVisible(false);
        panel_firm.setVisible(false);
        panel_date.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_rb_datewiseActionPerformed

    private void rb_firmwiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_firmwiseActionPerformed
        panel_date.setVisible(false);
        //   panel_table.setVisible(false);
        panel_firm.setVisible(true);

        if (menu_select == 1) {
            cb_report_godown.setEnabled(false);

        } else if (menu_select == 2) {
            cb_report_godown.setEnabled(true);
        } else if (menu_select == 3) {

            cb_report_godown.setEnabled(false);
            load_bardana_rec_sender();
        } else if (menu_select == 4) {
            cb_report_godown.setEnabled(false);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_rb_firmwiseActionPerformed

    private void btn_datewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_datewiseActionPerformed
        if (dt_date_report.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Please Select Date First");
        } else {
            try {
                table_data_entry.setVisible(true);
                String query = "";
                PreparedStatement statement = null;
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_date_report.getDate());
                DefaultTableModel tb = (DefaultTableModel) table_data_entry.getModel();
                tb.setColumnCount(0);
                tb.setRowCount(0);
                //  JOptionPane.showMessageDialog(null, date);
                if (menu_select == 1) {
                    //    JOptionPane.showMessageDialog(null, "PURCHASE ENTRY");
                    query = "select * from purchase where season_id=? and purchase_date=? order by purchase_firm ";
                    tb.addColumn("S No");
                    tb.addColumn("Date");
                    tb.addColumn("Firm Name");
                    tb.addColumn("Bags");
                    tb.addColumn("Weight");
                    tb.addColumn("Bardana Type");
                } else if (menu_select == 2) {
                    query = "select * from lifting where season_id=? and lifting_date=? order by lifting_firm ";
                    tb.addColumn("S No.");
                    tb.addColumn("DATE");
                    tb.addColumn("GATEPASS");
                    tb.addColumn("AARTHIA NAME");
                    tb.addColumn("BAGS");
                    tb.addColumn("WEIGHT");
                    tb.addColumn("BARDANA TYPE");
                    tb.addColumn("TRUCK NO.");
                    tb.addColumn("GODOWN");
                    //      JOptionPane.showMessageDialog(null, "LIFTING ENTRY");
                } else if (menu_select == 3) {
                    query = "select * from bardana_recieve where season_id=? and bardana_Rec_date=? order by bardana_rec_sender ";
                    tb.addColumn("S No");
                    tb.addColumn("Date");
                    tb.addColumn("Sender");

                    tb.addColumn("Bales");
                    tb.addColumn("loose");
                    tb.addColumn("Bardana Type");
                    //   JOptionPane.showMessageDialog(null, "BARDANA REC ENTRY");
                } else if (menu_select == 4) {
                    query = "select * from bardana_issue where season_id=? and bardana_issue_date=? order by bardana_issue_firm ";
                    tb.addColumn("S No");
                    tb.addColumn("Date");
                    tb.addColumn("Firm Name");
                    tb.addColumn("Bales");
                    tb.addColumn("loose");
                    tb.addColumn("Bardana Type");
                    //    JOptionPane.showMessageDialog(null, "BARDANA issue ENTRY");
                }
                Connection conn = connectdb.getConn();
                statement = conn.prepareStatement(query);
                statement.setInt(1, season_id);
                statement.setString(2, date);
                ResultSet rs = statement.executeQuery();
                if (menu_select == 1 || menu_select == 3 || menu_select == 4) {
                    while (rs.next()) {
                        //   JOptionPane.showMessageDialog(null, rs.getString(1));
                        Object o[] = {rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                        tb.addRow(o);
                    }

                } else {

                    while (rs.next()) {
                        //   JOptionPane.showMessageDialog(null, rs.getString(1));
                        Object o[] = {rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6),
                            rs.getString(7), rs.getString(8), rs.getString(9)};
                        tb.addRow(o);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_datewiseActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        table_data_entry.setVisible(true);

        if (menu_select == 1) {
            //       JOptionPane.showMessageDialog(null, "PURCHASE ENTRY");
            view_purchase_customize();

        } else if (menu_select == 2) {
            //      JOptionPane.showMessageDialog(null, "LIFTING ENTRY");
            view_lifting_customize();
            // insert_lifting();
        } else if (menu_select == 3) {

            //  JOptionPane.showMessageDialog(null, "BARDANA REC ENTRY");
            view_bardana_recieve_customize();
            // insert_recieve_bardana();

        } else if (menu_select == 4) {
            // JOptionPane.showMessageDialog(null, "BARDANA issue ENTRY");
            view_bardana_issue_customize();

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txt_nameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nameFocusGained

    private void txt_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nameKeyPressed

    private void txt_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nameKeyReleased

    private void txt_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nameKeyTyped

    private void btn_admin_entryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_admin_entryActionPerformed

        ///  JOptionPane.showMessageDialog(null, "admin entry selected");
        if (admin_select == 1) {
            //   JOptionPane.showMessageDialog(null, "firm entry selected");
            add_firm();
        } else if (admin_select == 2) {
            //  JOptionPane.showMessageDialog(null, "bardana entry selected");
            add_bardana();
        } else if (admin_select == 3) {
            //   JOptionPane.showMessageDialog(null, "godown entry selected");
            add_godown();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_admin_entryActionPerformed

    private void txt_godownKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_godownKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_godownKeyTyped

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        admin_select = 1;
        panel_admin_entry.setVisible(true);
        lbl_name.setVisible(true);
        lbl_godown.setVisible(false);
        txt_name.setVisible(true);
        txt_godown.setVisible(false);
        lbl_admin_header.setText("New Firm Entry");
        lbl_name.setText("Firm Name");
        txt_name.setText("");
        txt_godown.setText("");

        table_firms();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        admin_select = 2;
        panel_admin_entry.setVisible(true);
        lbl_name.setVisible(true);
        lbl_godown.setVisible(true);
        txt_name.setVisible(true);
        txt_godown.setVisible(true);
        lbl_admin_header.setText("New Bardana Entry");
        lbl_name.setText("Bardana Type");
        txt_name.setText("");
        txt_godown.setText("");
        table_bardana();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        admin_select = 3;
        panel_admin_entry.setVisible(true);
        lbl_name.setVisible(true);
        lbl_godown.setVisible(false);
        txt_name.setVisible(true);
        txt_godown.setVisible(false);
        lbl_admin_header.setText("New Godown Entry");
        lbl_name.setText("Godown Name");
        txt_name.setText("");
        txt_godown.setText("");
        table_godown();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton39ActionPerformed
        txt_name.setText("");
        txt_godown.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_jButton39ActionPerformed

    private void cb_update_bardanaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_update_bardanaItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_update_bardanaItemStateChanged

    private void txt_update_bagsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_update_bagsFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_bagsFocusGained

    private void txt_update_bagsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_update_bagsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_bagsKeyTyped

    private void txt_update_bagsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_update_bagsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_bagsKeyPressed

    private void txt_update_bagsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_update_bagsKeyReleased
        if (txt_update_bags.getText().equals("")) {
            txt_update_weight.setText("0");
        } else {
            float filling = load_filling(cb_update_bardana.getSelectedItem().toString());
            int bags = Integer.parseInt(txt_update_bags.getText());
            float total = (filling * bags) / 100;
            txt_update_weight.setText(String.valueOf(total));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_bagsKeyReleased

    private void txt_update_looseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_update_looseKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_looseKeyTyped

    private void txt_update_truckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_update_truckKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_truckKeyReleased

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        if (txt_update_sno.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Select A Record First");
        } else {
            String query = "";
            if (menu_select == 1) {
                update_purchase();

            } else if (menu_select == 2) {
                update_lifting();

            } else if (menu_select == 3) {
                update_bardana_recieve();

            } else if (menu_select == 4) {
                update_bardana_issue();

            }

        }

    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_delete_entryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delete_entryActionPerformed
        try {
            Connection conn = connectdb.getConn();
            PreparedStatement statement = null;
            String query = "";

            if (menu_select == 1) {
                query = "delete from purchase where purchase_sno=? ";
                statement = conn.prepareStatement(query);
                statement.setString(1, txt_update_sno.getText());

            } else if (menu_select == 2) {
                query = "delete from lifting where lifting_sno=? ";
                statement = conn.prepareStatement(query);
                statement.setString(1, txt_update_sno.getText());
            } else if (menu_select == 3) {
                query = "delete from bardana_recieve where bardana_rec_sno=? ";
                statement = conn.prepareStatement(query);
                statement.setString(1, txt_update_sno.getText());
                insert_recieve_bardana();

            } else if (menu_select == 4) {
                query = "delete from bardana_issue where bardana_issue_sno=? ";
                statement = conn.prepareStatement(query);
                statement.setString(1, txt_update_sno.getText());
            }
            int i = statement.executeUpdate();
            if (i == 1) {
                JOptionPane.showMessageDialog(null, "RECORD DELETED SUCCESSFULLY");
                total_report();

            } else {
                JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);

        }


    }//GEN-LAST:event_btn_delete_entryActionPerformed

    private void txt_update_balesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_update_balesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_update_balesKeyTyped

    private void table_data_entryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_data_entryMouseClicked

        try {

            if (evt.getClickCount() == 2) {
                dialog_update.setSize(500, 500);
                dialog_update.setLocationRelativeTo(null);
                dialog_update.setVisible(true);
                update_hide_all();
                //   JOptionPane.showMessageDialog(null, "Double clicked");
                int row = table_data_entry.getSelectedRow();
                if (menu_select == 1) {
                    update_purchase_visiblity();
                    txt_update_sno.setText((table_data_entry.getModel().getValueAt(row, 0)).toString());
                    String dat = table_data_entry.getValueAt(row, 1).toString();
                    Date pur_date = new SimpleDateFormat("yyyy-MM-dd").parse(dat);
                    dt_update_date.setDate(pur_date);
                    cb_update_firm.setSelectedItem((table_data_entry.getValueAt(row, 2)).toString());
                    txt_update_bags.setText((table_data_entry.getModel().getValueAt(row, 3)).toString());
                    txt_update_weight.setText((table_data_entry.getModel().getValueAt(row, 4)).toString());
                    cb_update_bardana.setSelectedItem((table_data_entry.getValueAt(row, 5)).toString());

                } else if (menu_select == 2) {
                    update_lifting_visiblity();
                    txt_update_sno.setText((table_data_entry.getModel().getValueAt(row, 0)).toString());
                    String dat = table_data_entry.getValueAt(row, 1).toString();
                    Date pur_date = new SimpleDateFormat("yyyy-MM-dd").parse(dat);
                    dt_update_date.setDate(pur_date);
                    txt_update_loose.setText((table_data_entry.getModel().getValueAt(row, 2)).toString());
                    cb_update_firm.setSelectedItem((table_data_entry.getValueAt(row, 3)).toString());
                    txt_update_bags.setText((table_data_entry.getModel().getValueAt(row, 4)).toString());
                    txt_update_weight.setText((table_data_entry.getModel().getValueAt(row, 5)).toString());
                    cb_update_bardana.setSelectedItem((table_data_entry.getValueAt(row, 6)).toString());
                    txt_update_truck.setText((table_data_entry.getModel().getValueAt(row, 7)).toString());
                    cb_update_godown.setSelectedItem((table_data_entry.getValueAt(row, 8)).toString());
                } else if (menu_select == 3) {
                    update_bardana_recieve_visiblity();
                    txt_update_sno.setText((table_data_entry.getModel().getValueAt(row, 0)).toString());
                    String dat = table_data_entry.getValueAt(row, 1).toString();
                    Date pur_date = new SimpleDateFormat("yyyy-MM-dd").parse(dat);
                    dt_update_date.setDate(pur_date);
                    cb_update_bardana.setSelectedItem((table_data_entry.getValueAt(row, 5)).toString());
                    txt_update_bales.setText((table_data_entry.getModel().getValueAt(row, 3)).toString());
                    txt_update_loose.setText((table_data_entry.getModel().getValueAt(row, 4)).toString());
                    txt_update_truck.setText((table_data_entry.getModel().getValueAt(row, 2)).toString());
                } else if (menu_select == 4) {
                    update_bardana_issue_visiblity();
                    txt_update_sno.setText((table_data_entry.getModel().getValueAt(row, 0)).toString());
                    String dat = table_data_entry.getValueAt(row, 1).toString();
                    Date pur_date = new SimpleDateFormat("yyyy-MM-dd").parse(dat);
                    dt_update_date.setDate(pur_date);
                    cb_update_bardana.setSelectedItem((table_data_entry.getValueAt(row, 5)).toString());
                    txt_update_bales.setText((table_data_entry.getModel().getValueAt(row, 3)).toString());
                    txt_update_loose.setText((table_data_entry.getModel().getValueAt(row, 4)).toString());
                    cb_update_firm.setSelectedItem((table_data_entry.getValueAt(row, 2)).toString());
                }

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_table_data_entryMouseClicked

    private void table_data_entryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_data_entryMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_table_data_entryMouseReleased

    private void cb_update_bardanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_update_bardanaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_update_bardanaActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        /*       DefaultTableModel tb = (DefaultTableModel) table_shortage.getModel();
        tb.fireTableDataChanged();
        if (tb.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "TABLE IS EMPTY");
        } else {
            for (int i = 0; i < tb.getRowCount(); i++) {
                if (tb.getValueAt(i, 0) == null
                    || tb.getValueAt(i, 9) == null
                    || tb.getValueAt(i, 10) == null
                    || tb.getValueAt(i, 11) == null) {
                    //do nothing
                    //JOptionPane.showMessageDialog(null, "RECORD NOT ADDED");
                } else {
                    // add record to database
                    try {
                        String query = "insert into shortage (txn,return_bag,bags_short,cut,shortage,remarks) values(?,?,?,?,?,?) ";
                        PreparedStatement statement = conn.prepareStatement(query);
                        statement.setString(1, tb.getValueAt(i, 0).toString());
                        statement.setString(2, tb.getValueAt(i, 9).toString());
                        statement.setString(3, tb.getValueAt(i, 10).toString());
                        statement.setString(4, tb.getValueAt(i, 11).toString());
                        statement.setString(5, tb.getValueAt(i, 12).toString());
                        statement.setString(6, tb.getValueAt(i, 13).toString());

                        int j = statement.executeUpdate();
                        if (j > 0) {
                            pending_shortage();
                            //      JOptionPane.showMessageDialog(null, "RECORD ADDED");
                        }
                    } catch (NullPointerException e) {
                        JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
            }
        }
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        /*    shortage_report ob = new shortage_report();
        ob.getconnection();
        TableModel model = ob.pending_lifting_customize(season_id, cb_shortage_godown.getSelectedItem().toString(), cb_shortage_firm.getSelectedItem().toString(), cb_shortage_bardana.getSelectedItem().toString());
        table_shortage.setModel(model);  */      // TODO add your handling code here:
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
//        pending_shortage(); 
        table_pending_lifting();// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        view_shortage();      //  show_shortage();        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jButton44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton44ActionPerformed
        /*        pg9 obj = new pg9();
        ResultSet rs = obj.complete_pg9dates(season_id, cb_pg.getSelectedItem().toString());
        try {
            while (rs.next()) {
                JOptionPane.showMessageDialog(null, rs.getString(1));
            }
            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_jButton44ActionPerformed

    private void btn_pg4_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg4_dateActionPerformed
        if (dt_pg4.getDate() == null) {
            JOptionPane.showMessageDialog(null, "PLEASE SELECT DATE FIRST");
        } else {
            table_pg4();
        String path = "D:\\PUNGRAIN REPORTS\\PG4";
            path = pathfile(path);
        
        

            float[] doc_width = {1, 5, 2, 2, 4};
            Document doc = new Document(PageSize.A4, 25, 25, 10, 0);
            Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nPG4", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
            heading.setAlignment(Element.ALIGN_CENTER);
            Paragraph centre_date = new Paragraph("MANDI:  " + mandi + "\nCROP YEAR:  " + crop_year + "\nDATE:   " + table_pg4.getValueAt(0, 0).toString() + "\n\n" + String.valueOf(lbl_total_pg4.getText()), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, Font.UNDERLINE, BaseColor.BLACK));
            centre_date.setAlignment(Element.ALIGN_LEFT);
            PdfPTable tb = new PdfPTable(doc_width);
            tb.setWidthPercentage(100);
            tb.setSpacingAfter(30);
            tb.setSpacingBefore(10);
            tb.addCell(new PdfPCell(new Phrase("S.NO", FontFactory.getFont(FontFactory.HELVETICA, 10))));
            tb.addCell(new PdfPCell(new Phrase("AARTHIA NAME", FontFactory.getFont(FontFactory.HELVETICA, 10))));
            tb.addCell(new PdfPCell(new Phrase("BAGS", FontFactory.getFont(FontFactory.HELVETICA, 10))));
            tb.addCell(new PdfPCell(new Phrase("WEIGHT", FontFactory.getFont(FontFactory.HELVETICA, 10))));
            tb.addCell(new PdfPCell(new Phrase("BARDANA TYPE", FontFactory.getFont(FontFactory.HELVETICA, 10))));
            int sno = 1;
            for (int i = 0; i < table_pg4.getRowCount(); i++) {
                tb.addCell(new PdfPCell(new Phrase(String.valueOf(sno), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase(table_pg4.getValueAt(i, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase(table_pg4.getValueAt(i, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase(table_pg4.getValueAt(i, 3).toString(), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase(table_pg4.getValueAt(i, 4).toString(), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                sno++;
            }
            PdfPTable stamp = new PdfPTable(1);
            PdfPCell stp = new PdfPCell(new Phrase("INSPECTOR PUNGRAIN", FontFactory.getFont(FontFactory.HELVETICA, 10)));
            PdfPCell stp1 = new PdfPCell(new Phrase("MANDI: " + mandi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
            stp.setBorder(PdfPCell.NO_BORDER);
            stp1.setBorder(PdfPCell.NO_BORDER);
            stamp.addCell(stp);
            stamp.addCell(stp1);
            stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
            stamp.setWidthPercentage(30);
            try {
                PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
                doc.open();
                doc.add(heading);
                doc.add(centre_date);
                doc.add(tb);
                doc.add(stamp);
                JOptionPane.showMessageDialog(null, "PG4 CREATED");
                doc.close();
            } catch (FileNotFoundException | DocumentException ex) {
                Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_pg4_dateActionPerformed

    private void btn_pg4_completeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg4_completeActionPerformed
        /*     SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        // String date = sdf.format(dt_pg4.getDate());
        ArrayList<String> dates = new ArrayList<String>();
        dates = pg4dates();
        String path = "D:\\PUNGRAIN REPORTS\\PG4";
        path = pathfile(path);
        float[] doc_width = {1, 5, 2, 2, 4};
        Document doc = new Document(PageSize.A4, 25, 25, 10, 0);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nPG4", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        PdfPTable stamp = new PdfPTable(1);
        PdfPCell stp = new PdfPCell(new Phrase("INSPECTOR PUNGRAIN", FontFactory.getFont(FontFactory.HELVETICA, 10)));
        PdfPCell stp1 = new PdfPCell(new Phrase("MANDI: " + mandi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
        stp.setBorder(PdfPCell.NO_BORDER);
        stp1.setBorder(PdfPCell.NO_BORDER);
        stamp.addCell(stp);
        stamp.addCell(stp1);
        stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
        stamp.setWidthPercentage(30);
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            for (int i = 0; i < dates.size(); i++) {
                int bag = 0;
                float weight = 0;
                String date = null;
                ResultSet rs = null;
                rs = pg4_all(dates.get(i));
                PdfPTable tb = new PdfPTable(doc_width);
                tb.setWidthPercentage(100);
                tb.setSpacingAfter(30);
                tb.setSpacingBefore(10);
                tb.addCell(new PdfPCell(new Phrase("S.NO", FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase("AARTHIA NAME", FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase("BAGS", FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase("WEIGHT", FontFactory.getFont(FontFactory.HELVETICA, 10))));
                tb.addCell(new PdfPCell(new Phrase("BARDANA TYPE", FontFactory.getFont(FontFactory.HELVETICA, 10))));
                int sno = 1;
                while (rs.next()) {
                    date = sdf.format(rs.getDate(1));
                    tb.addCell(new PdfPCell(new Phrase(String.valueOf(sno), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                    tb.addCell(new PdfPCell(new Phrase(rs.getString(2), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                    tb.addCell(new PdfPCell(new Phrase(rs.getString(3), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                    tb.addCell(new PdfPCell(new Phrase(rs.getString(4), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                    tb.addCell(new PdfPCell(new Phrase(rs.getString(5), FontFactory.getFont(FontFactory.HELVETICA, 10))));
                    bag = bag + rs.getInt(3);
                    weight = weight + rs.getFloat(4);
                    sno++;
                }
                lbl_total_pg4.setText("TOTAL PURCHASE: " + bag + "  BAG/ " + weight + "  QTL");
                Paragraph centre_date = new Paragraph("MANDI:  " + mandi + "\nDATE:   " + date + "\n" + "CROP YEAR:  " + crop_year + "\n" + String.valueOf(lbl_total_pg4.getText()), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, Font.UNDERLINE, BaseColor.BLACK));
                centre_date.setAlignment(Element.ALIGN_LEFT);
                doc.newPage();
                doc.add(heading);
                doc.add(centre_date);
                doc.add(tb);
                doc.add(stamp);
            }
            JOptionPane.showMessageDialog(null, "PG4 CREATED");
            doc.close();
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_btn_pg4_completeActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        /*      if (dt_pg4.getDate() == null) {
            JOptionPane.showMessageDialog(null, "PLEASE SELECT DATE FIRST");
        } else {
            ArrayList<String> godown = new ArrayList<String>();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            String date = sdf.format(dt_pg4.getDate());
            SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
            String dt = sf.format(dt_pg4.getDate());
            Font font = FontFactory.getFont(FontFactory.HELVETICA, 10);
            String path = "D:\\PUNGRAIN REPORTS\\PG9";
            path = pathfile(path);
            float[] doc_width = {3, 2, 2, 2, 4, 2, 2, 2};
            Document doc = new Document(PageSize.A4.rotate(), 5, 5, 8, 8);
            Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nSTOCK REPORT", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
            heading.setAlignment(Element.ALIGN_CENTER);
            heading.setSpacingAfter(10);
            PdfPTable heading1 = new PdfPTable(3);
            heading1.addCell(new PdfPCell(new Phrase("MANDI: " + mandi, font)));
            heading1.addCell(new PdfPCell(new Phrase("DATE: " + dt, font)));
            heading1.addCell(new PdfPCell(new Phrase("CROP_YEAR: " + crop_year, font)));
            PdfPTable data = new PdfPTable(doc_width);
            data.setWidthPercentage(100);
            data.addCell("DETAILS");
            data.addCell("BEFORE 1ST APRIL");
            data.addCell("TODAY");
            data.addCell("TILL DATE");
            data.addCell("DISPATCH");
            data.addCell("BEFORE 1ST APRIL");
            data.addCell("TODAY");
            data.addCell("TILL DATE");
            PdfPCell detail = new PdfPCell();
            PdfPCell pur_pre = new PdfPCell();
            PdfPCell pur_today = new PdfPCell();
            PdfPCell pur_total = new PdfPCell();
            PdfPCell dispatch_godwn = new PdfPCell();
            PdfPCell dis_pre = new PdfPCell();
            PdfPCell dis_today = new PdfPCell();
            PdfPCell dis_total = new PdfPCell();
            List dispatch_godown = new List(List.ORDERED);
            dispatch_godown.setFirst(1);
            List dispatch_previous = new List();
            List dispatch_today = new List();
            List dispatch_total = new List();
            detail.addElement(new Phrase("OPENING BALANCE FROM 1ST APRIL\n\nBALANCE IN HAND\n\nSTORAGE\n\nPURCHASE RECIEPT\n\nPURCHASES\n\nTRANSFER TO OTHER CENTRE\n\nEXCESS\n\nSHORTAGE DURING LOADING\n\nTOTAL", font));
            PdfPTable balance = new PdfPTable(1);
            balance.setHorizontalAlignment(Element.ALIGN_RIGHT);
            balance.setWidthPercentage(30);
            balance.setSpacingAfter(30);
            PdfPTable stamp = new PdfPTable(1);
            stamp.addCell(new PdfPCell(new Phrase("INSPECTOR PUNGRAIN\nMANDI: " + mandi, font)));
            stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
            stamp.setWidthPercentage(30);
            //  stamp.getDefaultCell().setBorder(Rectangle.NO_BORDER);.
            int bags = 0;
            float wt = 0;
            CallableStatement smt = null;
            try {
                ResultSet rs = pg9(date);
                if (rs.first()) {
                    rs.beforeFirst();
                    while (rs.next()) {
                        godown.add(rs.getString(1));
                    }
                    for (int i = 0; i < godown.size(); i++) {
                        String god = godown.get(i);
                        smt = pg9_storedpr(god, date);
                        bags = bags + smt.getInt(4);
                        wt = wt + smt.getInt(5);
                        pur_pre = new PdfPCell();
                        pur_today = new PdfPCell();
                        pur_total = new PdfPCell();
                        pur_pre.addElement(new Phrase(smt.getString(4) + "    BAGS " + smt.getString(5) + " QTL", font));
                        pur_today.addElement(new Phrase(smt.getString(6) + "    BAGS " + smt.getString(7) + " QTL", font));
                        pur_total.addElement(new Phrase(smt.getString(8) + "    BAGS " + smt.getString(9) + " QTL", font));
                        dispatch_godown.add(new ListItem(god, font));
                        dis_pre.addElement(new Phrase(smt.getString(10) + " BAGS " + smt.getString(11) + " QTL", font));
                        dis_today.addElement(new Phrase(smt.getString(12) + " BAGS " + smt.getString(13) + " QTL", font));
                        dis_total.addElement(new Phrase(smt.getString(14) + " BAGS " + smt.getString(15) + " QTL", font));
                    }

                    dispatch_godown.add(new ListItem("TOTAL", font));
                    dispatch_godwn.addElement(dispatch_godown);

                    dis_pre.addElement(new Phrase(smt.getString(16) + " BAGS " + smt.getString(17) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(18) + " BAGS " + smt.getString(19) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(20) + " BAGS " + smt.getString(21) + " QTL", font));
                    balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + smt.getString(22) + " BAGS " + smt.getString(23) + " QTL", font)));

                } else {

                    godown.add("");
                    String god = godown.get(0);
                    smt = pg9_storedpr(god, date);
                    pur_pre = new PdfPCell();
                    pur_today = new PdfPCell();
                    pur_total = new PdfPCell();
                    pur_pre.addElement(new Phrase(smt.getString(4) + "    BAGS " + smt.getString(5) + " QTL", font));
                    pur_today.addElement(new Phrase(smt.getString(6) + "    BAGS " + smt.getString(7) + " QTL", font));
                    pur_total.addElement(new Phrase(smt.getString(8) + "    BAGS " + smt.getString(9) + " QTL", font));
                    dispatch_godown.add(new ListItem(god, font));
                    dis_pre.addElement(new Phrase(smt.getString(10) + " BAGS " + smt.getString(11) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(12) + " BAGS " + smt.getString(13) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(14) + " BAGS " + smt.getString(15) + " QTL", font));
                    //  dispatch_godown.add(new ListItem("TOTAL", font));
                    //dispatch_godwn.addElement(dispatch_godown);

                    //   dis_pre.addElement(new Phrase(smt.getString(16) + " BAGS " + smt.getString(17) + " QTL", font));
                    //  dis_today.addElement(new Phrase(smt.getString(18) + " BAGS " + smt.getString(19) + " QTL", font));
                    //  dis_total.addElement(new Phrase(smt.getString(20) + " BAGS " + smt.getString(21) + " QTL", font));
                    balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + smt.getString(22) + " BAGS " + smt.getString(23) + " QTL", font)));
                    //  JOptionPane.showMessageDialog(null, "NO LIFTING");
                }

                data.addCell(detail);
                data.addCell(pur_pre);
                data.addCell(pur_today);
                data.addCell(pur_total);
                data.addCell(dispatch_godwn);
                data.addCell(dis_pre);
                data.addCell(dis_today);
                data.addCell(dis_total);
                PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
                doc.open();
                doc.add(heading);
                doc.add(heading1);
                doc.add(data);
                doc.add(balance);
                doc.add(stamp);
                JOptionPane.showMessageDialog(null, "PDF CREATED");
                doc.close();
            } catch (FileNotFoundException ex) {
                // Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                //Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/
    }//GEN-LAST:event_jButton12ActionPerformed

    private void btn_pg9_completeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg9_completeActionPerformed
        /*     SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        ArrayList<String> dates = new ArrayList<String>();
        ArrayList<String> godown = new ArrayList<String>();
        Font font = FontFactory.getFont(FontFactory.HELVETICA, 10);
        String path = "D:\\PUNGRAIN REPORTS\\PG9";
        path = pathfile(path);
        float[] doc_width = {3, 2, 2, 2, 4, 2, 2, 2};
        Document doc = new Document(PageSize.A4.rotate(), 5, 5, 8, 8);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nSTOCK REPORT", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        heading.setSpacingAfter(10);
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            ResultSet rs = pg9dates();
            while (rs.next()) {
                dates.add(rs.getString(1));
            }
            for (int i = 0; i < dates.size(); i++) {
                godown.clear();
                PdfPTable heading1 = new PdfPTable(3);
                heading1.addCell(new PdfPCell(new Phrase("MANDI: " + mandi, font)));
                heading1.addCell(new PdfPCell(new Phrase("DATE: " + dates.get(i), font)));
                heading1.addCell(new PdfPCell(new Phrase("CROP_YEAR: " + crop_year, font)));
                PdfPTable data = new PdfPTable(doc_width);
                data.setWidthPercentage(100);
                data.addCell("DETAILS");
                data.addCell("BEFORE 1ST APRIL");
                data.addCell("TODAY");
                data.addCell("TILL DATE");
                data.addCell("DISPATCH");
                data.addCell("BEFORE 1ST APRIL");
                data.addCell("TODAY");
                data.addCell("TILL DATE");
                PdfPCell detail = new PdfPCell();
                PdfPCell pur_pre = new PdfPCell();
                PdfPCell pur_today = new PdfPCell();
                PdfPCell pur_total = new PdfPCell();
                PdfPCell dispatch_godwn = new PdfPCell();
                PdfPCell dis_pre = new PdfPCell();
                PdfPCell dis_today = new PdfPCell();
                PdfPCell dis_total = new PdfPCell();
                detail.addElement(new Phrase("OPENING BALANCE FROM 1ST APRIL\n\nBALANCE IN HAND\n\nSTORAGE\n\nPURCHASE RECIEPT\n\nPURCHASES\n\nTRANSFER TO OTHER CENTRE\n\nEXCESS\n\nSHORTAGE DURING LOADING\n\nTOTAL", font));
                PdfPTable balance = new PdfPTable(1);
                balance.setHorizontalAlignment(Element.ALIGN_RIGHT);
                balance.setWidthPercentage(30);
                balance.setSpacingAfter(30);
                PdfPTable stamp = new PdfPTable(1);
                stamp.addCell(new PdfPCell(new Phrase("INSPECTOR PUNGRAIN\nMANDI: " + mandi, font)));
                stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
                stamp.setWidthPercentage(30);
                CallableStatement smt = null;
                List dispatch_godown = new List(List.ORDERED);
                dispatch_godown.setFirst(1);
                List dispatch_previous = new List();
                List dispatch_today = new List();
                List dispatch_total = new List();
                int bags = 0;
                float wt = 0;
                ResultSet rset = pg9(dates.get(i));
                if (rset.first()) {
                    rset.beforeFirst();
                    while (rset.next()) {
                        godown.add(rset.getString(1));
                    }
                    for (int j = 0; j < godown.size(); j++) {
                        String god = godown.get(j);
                        smt = pg9_storedpr(god, dates.get(i));
                        bags = bags + smt.getInt(4);
                        wt = wt + smt.getInt(5);
                        pur_pre = new PdfPCell();
                        pur_today = new PdfPCell();
                        pur_total = new PdfPCell();
                        pur_pre.addElement(new Phrase(smt.getString(4) + "    BAGS " + smt.getString(5) + " QTL", font));
                        pur_today.addElement(new Phrase(smt.getString(6) + "    BAGS " + smt.getString(7) + " QTL", font));
                        pur_total.addElement(new Phrase(smt.getString(8) + "    BAGS " + smt.getString(9) + " QTL", font));
                        dispatch_godown.add(new ListItem(god, font));
                        dis_pre.addElement(new Phrase(smt.getString(10) + " BAGS " + smt.getString(11) + " QTL", font));
                        dis_today.addElement(new Phrase(smt.getString(12) + " BAGS " + smt.getString(13) + " QTL", font));
                        dis_total.addElement(new Phrase(smt.getString(14) + " BAGS " + smt.getString(15) + " QTL", font));
                    }
                    dispatch_godown.add(new ListItem("TOTAL", font));
                    dispatch_godwn.addElement(dispatch_godown);

                    dis_pre.addElement(new Phrase(smt.getString(16) + " BAGS " + smt.getString(17) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(18) + " BAGS " + smt.getString(19) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(20) + " BAGS " + smt.getString(21) + " QTL", font));
                    balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + smt.getString(22) + " BAGS " + smt.getString(23) + " QTL", font)));
                } else {
                    godown.add("");
                    String god = godown.get(0);
                    smt = pg9_storedpr(god, dates.get(i));
                    pur_pre = new PdfPCell();
                    pur_today = new PdfPCell();
                    pur_total = new PdfPCell();
                    pur_pre.addElement(new Phrase(smt.getString(4) + "    BAGS " + smt.getString(5) + " QTL", font));
                    pur_today.addElement(new Phrase(smt.getString(6) + "    BAGS " + smt.getString(7) + " QTL", font));
                    pur_total.addElement(new Phrase(smt.getString(8) + "    BAGS " + smt.getString(9) + " QTL", font));
                    dispatch_godown.add(new ListItem(god, font));
                    dis_pre.addElement(new Phrase(smt.getString(10) + " BAGS " + smt.getString(11) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(12) + " BAGS " + smt.getString(13) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(14) + " BAGS " + smt.getString(15) + " QTL", font));
                    balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + smt.getString(22) + " BAGS " + smt.getString(23) + " QTL", font)));
                }
                data.addCell(detail);
                data.addCell(pur_pre);
                data.addCell(pur_today);
                data.addCell(pur_total);
                data.addCell(dispatch_godwn);
                data.addCell(dis_pre);
                data.addCell(dis_today);
                data.addCell(dis_total);

                doc.newPage();
                doc.add(heading);
                doc.add(heading1);
                doc.add(data);
                doc.add(balance);
                doc.add(stamp);
                //         JOptionPane.showMessageDialog(null, dates.size() + "  done" + i);
                //    int done = i + 1;
                /// lbl.setText("TOTAL PAGES  " + dates.size() + "PCURRENT PAGE  " + done);
            }
            JOptionPane.showMessageDialog(null, "PDF CREATED");
            doc.close();
        } catch (FileNotFoundException ex) {
            // Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            //Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg9_completeActionPerformed

    private void btn_pg9_monthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg9_monthlyActionPerformed
        /*      ArrayList<String> godown = new ArrayList<String>();
        int year, month;
        year = yr.getYear();
        month = mt_month.getMonth() + 1;
        YearMonth ym = YearMonth.of(year, month);
        LocalDate first = ym.atDay(1);
        LocalDate last = ym.atEndOfMonth();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String first_date = first.toString();
        String last_date = last.toString();

        Font font = FontFactory.getFont(FontFactory.HELVETICA, 11);
        String path = "D:\\PUNGRAIN REPORTS\\PG9";
        path = pathfile(path);
        float[] doc_width = {3, 2, 2, 2, 4, 2, 2, 2};
        Document doc = new Document(PageSize.A4.rotate(), 5, 5, 8, 8);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nSTOCK REPORT", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        heading.setSpacingAfter(10);
        PdfPTable heading1 = new PdfPTable(3); // MANDI DATE CROP YEAR
        PdfPCell cell = new PdfPCell(new Phrase("MANDI: " + mandi));
        PdfPCell cell1 = new PdfPCell(new Phrase("MONTH: " + ym));
        PdfPCell cell2 = new PdfPCell(new Phrase("CROP_YEAR: " + crop_year));
        cell.setBorder(PdfPCell.NO_BORDER);
        cell1.setBorder(PdfPCell.NO_BORDER);
        cell2.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(PdfPCell.ALIGN_LEFT);
        cell1.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);
        cell2.setHorizontalAlignment(PdfPCell.ALIGN_RIGHT);
        heading1.addCell(cell);
        heading1.addCell(cell1);
        heading1.addCell(cell2);
        heading1.setSpacingAfter(10);

        PdfPCell detail = new PdfPCell();
        detail.addElement(new Phrase("OPENING BALANCE FROM 1ST APRIL"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("BALANCE IN HAND"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("STORAGE"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("PURCHASE RECIEPT"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("PURCHASES"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("TRANSFER TO OTHER CENTRE"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("EXCESS"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("SHORTAGE DURING LOADING"));
        detail.addElement(new Phrase("  "));
        detail.addElement(new Phrase("TOTAL"));

        PdfPTable data = new PdfPTable(doc_width);
        data.setWidthPercentage(100);
        data.addCell("DETAILS");
        data.addCell("BEFORE 1ST APRIL");
        data.addCell("TODAY");
        data.addCell("TILL DATE");
        data.addCell("DISPATCH");
        data.addCell("BEFORE 1ST APRIL");
        data.addCell("TODAY");
        data.addCell("TILL DATE");

        PdfPTable balance = new PdfPTable(2);
        balance.setHorizontalAlignment(Element.ALIGN_RIGHT);
        balance.setWidthPercentage(30);
        balance.setSpacingAfter(30);

        PdfPTable stamp = new PdfPTable(1);
        PdfPCell stp = new PdfPCell(new Phrase("INSPECTOR PUNGRAIN", FontFactory.getFont(FontFactory.HELVETICA, 10)));
        PdfPCell stp1 = new PdfPCell(new Phrase("MANDI: " + mandi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
        stp.setBorder(PdfPCell.NO_BORDER);
        stp1.setBorder(PdfPCell.NO_BORDER);
        stamp.addCell(stp);
        stamp.addCell(stp1);
        stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
        stamp.setWidthPercentage(30);

        try {
            PdfPCell pur_pre = new PdfPCell();
            PdfPCell pur_today = new PdfPCell();
            PdfPCell pur_total = new PdfPCell();
            PdfPCell dispatch_godwn = new PdfPCell();

            PdfPCell dis_pre = new PdfPCell();
            PdfPCell dis_today = new PdfPCell();
            PdfPCell dis_total = new PdfPCell();
            List dispatch_godown = new List(List.ORDERED);
            int bags = 0;
            float wt = 0;
            CallableStatement smt = null;
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            ResultSet rs = pg9(last_date);
            if (rs.first()) {
                rs.beforeFirst();
                while (rs.next()) {
                    godown.add(rs.getString(1));
                }
                for (int i = 0; i < godown.size(); i++) {
                    String god = godown.get(i);
                    smt = pg9_monthly_storedpr(god, first_date, last_date);
                    bags = bags + smt.getInt(5);
                    wt = wt + smt.getInt(6);
                    pur_pre = new PdfPCell();
                    pur_today = new PdfPCell();
                    pur_total = new PdfPCell();
                    pur_pre.addElement(new Phrase(smt.getString(5) + "    BAGS " + smt.getString(6) + " QTL", font));
                    pur_today.addElement(new Phrase(smt.getString(7) + "    BAGS " + smt.getString(8) + " QTL", font));
                    pur_total.addElement(new Phrase(smt.getString(9) + "    BAGS " + smt.getString(10) + " QTL", font));
                    dispatch_godown.add(new ListItem(god, font));
                    dis_pre.addElement(new Phrase(smt.getString(11) + " BAGS " + smt.getString(12) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(13) + " BAGS " + smt.getString(14) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(15) + " BAGS " + smt.getString(16) + " QTL", font));
                }
                dispatch_godown.add(new ListItem("TOTAL", font));
                //   dispatch_godwn.addElement(dispatch_godown);
                dis_pre.addElement(new Phrase(smt.getString(17) + " BAGS " + smt.getString(18) + " QTL", font));
                dis_today.addElement(new Phrase(smt.getString(19) + " BAGS " + smt.getString(20) + " QTL", font));
                dis_total.addElement(new Phrase(smt.getString(21) + " BAGS " + smt.getString(22) + " QTL", font));
                balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + smt.getString(23) + " BAGS " + smt.getString(24) + " QTL", font)));
            } else {
                String god = "";
                smt = pg9_monthly_storedpr(god, first_date, last_date);
                pur_pre = new PdfPCell();
                pur_today = new PdfPCell();
                pur_total = new PdfPCell();
                pur_pre.addElement(new Phrase(smt.getString(5) + "    BAGS " + smt.getString(6) + " QTL", font));
                pur_today.addElement(new Phrase(smt.getString(7) + "    BAGS " + smt.getString(8) + " QTL", font));
                pur_total.addElement(new Phrase(smt.getString(9) + "    BAGS " + smt.getString(10) + " QTL", font));
                dispatch_godown.add(new ListItem(god, font));
                dis_pre.addElement(new Phrase(smt.getString(11) + " BAGS " + smt.getString(12) + " QTL", font));
                dis_today.addElement(new Phrase(smt.getString(13) + " BAGS " + smt.getString(14) + " QTL", font));
                dis_total.addElement(new Phrase(smt.getString(15) + " BAGS " + smt.getString(16) + " QTL", font));
                balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + smt.getString(23) + " BAGS " + smt.getString(24) + " QTL", font)));
            }
            dispatch_godwn.addElement(dispatch_godown);
            data.addCell(detail);
            data.addCell(pur_pre);
            data.addCell(pur_today);
            data.addCell(pur_total);
            data.addCell(dispatch_godwn);
            data.addCell(dis_pre);
            data.addCell(dis_today);
            data.addCell(dis_total);
            doc.add(heading);
            doc.add(heading1);
            doc.add(data);
            doc.add(balance);
            doc.add(stamp);
            JOptionPane.showMessageDialog(null, "PDF CREATED");
            doc.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_btn_pg9_monthlyActionPerformed

    private void btn_pg39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg39ActionPerformed
        /*    ArrayList<String> dates = new ArrayList<String>();
        ArrayList<String> bardana = new ArrayList<String>();
        Font font = FontFactory.getFont(FontFactory.HELVETICA, 9);
        String path = "D:\\PUNGRAIN REPORTS\\PG39";
        path = pathfile(path);
        float[] doc_width = {1, 1, 1, 1, 1, 1, 1};
        Document doc = new Document(PageSize.A4.rotate(), 3, 3, 10, 10);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nPG39", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        heading.setSpacingAfter(10);
        dates = get_monthdates();
        int year, month;
        year = yr.getYear();
        month = mt_month.getMonth() + 1;
        YearMonth ym = YearMonth.of(year, month);
        LocalDate first = ym.atDay(1);
        LocalDate last = ym.atEndOfMonth();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String first_date = first.toString();
        String last_date = last.toString();
        bardana = pg39_bardana(first_date, last_date);

        int size = bardana.size();
        int table_size = (size * 10) + 1;
        PdfPTable heading1 = new PdfPTable(3); // MANDI DATE CROP YEAR
        PdfPCell cell = new PdfPCell(new Phrase("MANDI: " + mandi));
        PdfPCell cell1 = new PdfPCell(new Phrase("MONTH: " + ym));
        PdfPCell cell2 = new PdfPCell(new Phrase("CROP_YEAR: " + crop_year));
        cell.setBorder(PdfPCell.NO_BORDER);
        cell1.setBorder(PdfPCell.NO_BORDER);
        cell2.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(PdfPCell.ALIGN_LEFT);
        cell1.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);
        cell2.setHorizontalAlignment(PdfPCell.ALIGN_RIGHT);
        heading1.addCell(cell);
        heading1.addCell(cell1);
        heading1.addCell(cell2);
        heading1.setSpacingAfter(10);

        PdfPTable pg39 = new PdfPTable(table_size);
        pg39.setWidthPercentage(100);
        PdfPCell dt = new PdfPCell(new Phrase("DATE", font));
        dt.setRowspan(3);
        PdfPCell ob = new PdfPCell(new Phrase("OPENING BALANCE", font));
        ob.setColspan(size * 2);
        PdfPCell rec = new PdfPCell(new Phrase("RECIEVED", font));
        rec.setColspan(size * 2);
        PdfPCell total = new PdfPCell(new Phrase("TOTAL", font));
        total.setColspan(size * 2);
        PdfPCell issued = new PdfPCell(new Phrase("ISSUED", font));
        issued.setColspan(size * 2);
        PdfPCell cb = new PdfPCell(new Phrase("CLOSING BALANCE", font));
        cb.setColspan(size * 2);

        pg39.addCell(dt);
        pg39.addCell(ob);
        pg39.addCell(rec);
        pg39.addCell(total);
        pg39.addCell(issued);
        pg39.addCell(cb);

        ob = new PdfPCell(new Phrase("EMPTY", font));

        ob.setColspan(size);

        PdfPCell ob1 = new PdfPCell(new Phrase("FILLED", font));
        ob1.setColspan(size);
        rec = new PdfPCell(new Phrase("EMPTY", font));
        rec.setColspan(size);
        PdfPCell rec1 = new PdfPCell(new Phrase("FILLED", font));
        rec1.setColspan(size);
        total = new PdfPCell(new Phrase("EMPTY", font));
        total.setColspan(size);
        PdfPCell total1 = new PdfPCell(new Phrase("FILLED", font));
        total1.setColspan(size);
        issued = new PdfPCell(new Phrase("EMPTY", font));
        issued.setColspan(size);
        PdfPCell issued1 = new PdfPCell(new Phrase("FILLED", font));
        issued1.setColspan(size);
        cb = new PdfPCell(new Phrase("EMPTY", font));
        cb.setColspan(size);
        PdfPCell cb1 = new PdfPCell(new Phrase("FILLED", font));
        cb1.setColspan(size);

        pg39.addCell(ob);
        pg39.addCell(ob1);
        pg39.addCell(rec);
        pg39.addCell(rec1);
        pg39.addCell(total);
        pg39.addCell(total1);
        pg39.addCell(issued);
        pg39.addCell(issued1);
        pg39.addCell(cb);
        pg39.addCell(cb1);

        for (int y = 1; y <= 10; y++) {
            for (int i = 0; i < bardana.size(); i++) {
                pg39.addCell(new PdfPCell(new Phrase(bardana.get(i), font)));
            }
        }
        for (int a = 0; a < dates.size(); a++) {
            for (int b = 0; b < bardana.size(); b++) {
                if (bardana.get(b).contains("new")) {
                    JOptionPane.showMessageDialog(null, "new bardana");
                } else {
                    JOptionPane.showMessageDialog(null, "once used bardana");
                }

            }

        }

        /*    PdfPCell date = new PdfPCell();

        for (int i = 0; i < table_pg4.getRowCount(); i++) {
            date.setHorizontalAlignment(Element.ALIGN_CENTER);
            ob.setHorizontalAlignment(Element.ALIGN_CENTER);
            rec.setHorizontalAlignment(Element.ALIGN_CENTER);
            total.setHorizontalAlignment(Element.ALIGN_CENTER);
            openbale.setHorizontalAlignment(Element.ALIGN_CENTER);
            other.setHorizontalAlignment(Element.ALIGN_CENTER);
            cb.setHorizontalAlignment(Element.ALIGN_CENTER);

            date.addElement(new Phrase(table_pg4.getValueAt(i, 0).toString(), font));
            pg39a.addCell(date);
            date = new PdfPCell();
            ob.addElement(new Phrase(table_pg4.getValueAt(i, 1).toString(), font));
            rec.addElement(new Phrase(table_pg4.getValueAt(i, 2).toString(), font));
            total.addElement(new Phrase(table_pg4.getValueAt(i, 3).toString(), font));
            openbale.addElement(new Phrase(table_pg4.getValueAt(i, 4).toString(), font));
            other.addElement(new Phrase(table_pg4.getValueAt(i, 5).toString(), font));
            cb.addElement(new Phrase(table_pg4.getValueAt(i, 6).toString(), font));

            pg39a.addCell(ob);
            pg39a.addCell(rec);
            pg39a.addCell(total);
            pg39a.addCell(openbale);
            pg39a.addCell(other);
            pg39a.addCell(cb);

            ob = new PdfPCell();
            rec = new PdfPCell();
            total = new PdfPCell();
            openbale = new PdfPCell();
            other = new PdfPCell();
            cb = new PdfPCell();
        }
        pg39a.setSpacingAfter(20);
        //JOptionPane.showMessageDialog(null, pg39a_rec);
        //JOptionPane.showMessageDialog(null, pg39a_open);
        //  JOptionPane.showMessageDialog(null, pg39a_other);
        //  JOptionPane.showMessageDialog(null, obal);;
        String op = "";

        op = table_pg4.getValueAt(0, 1).toString();
        int obal = Integer.parseInt(op);
        int total_bales = obal + pg39a_rec;
        int closing = total_bales - (pg39a_open + pg39a_other);
        float[] width={4,1};
        PdfPTable summary = new PdfPTable(width);
        summary.setHorizontalAlignment(Element.ALIGN_CENTER);
        summary.setWidthPercentage(38);

        ob = new PdfPCell();
        ob.addElement(new Phrase("OPENING BALANCE", font));
        ob.addElement(new Phrase("RECIEVED BALES", font));
        ob.addElement(new Phrase("TOTAL BALES", font));
        ob.addElement(new Phrase("OPENED BALES", font));
        ob.addElement(new Phrase("ISSUED TO OTHER CENTRE", font));
        ob.addElement(new Phrase("CLOSING BALANCE", font));

        summary.addCell(ob);
        ob = new PdfPCell();
        ob.addElement(new Phrase(op));
        ob.addElement(new Phrase(String.valueOf(pg39a_rec)));
        ob.addElement(new Phrase(String.valueOf(total_bales)));
        ob.addElement(new Phrase(String.valueOf(pg39a_open)));
        ob.addElement(new Phrase(String.valueOf(pg39a_other)));
        ob.addElement(new Phrase(String.valueOf(closing)));

        summary.addCell(ob);
        // rec = new PdfPCell();
        // total = new PdfPCell();
        //openbale = new PdfPCell();
        //  other = new PdfPCell();
        //  cb = new PdfPCell();
        // ob.

        PdfPTable stamp = new PdfPTable(1);
        stamp.setSpacingBefore(30);
        PdfPCell stp = new PdfPCell(new Phrase("INSPECTOR PUNGRAIN", FontFactory.getFont(FontFactory.HELVETICA, 10)));
        PdfPCell stp1 = new PdfPCell(new Phrase("MANDI: " + mandi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
        stp.setBorder(PdfPCell.NO_BORDER);
        stp1.setBorder(PdfPCell.NO_BORDER);
        stp.setHorizontalAlignment(Element.ALIGN_RIGHT);
        stp1.setHorizontalAlignment(Element.ALIGN_RIGHT);
        stamp.addCell(stp);
        stamp.addCell(stp1);
        stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
        stamp.setWidthPercentage(30);
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            doc.add(heading);
            doc.add(heading1);
            doc.add(pg39);
            // doc.add(summary);
            //  doc.add(stamp);
            JOptionPane.showMessageDialog(null, "PDF CREATED");
            doc.close();
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg39ActionPerformed

    private void btn_pg39aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg39aActionPerformed
        /*    int year, month;
        year = yr.getYear();
        month = mt_month.getMonth() + 1;
        YearMonth ym = YearMonth.of(year, month);
        pg39a();
        Font font = FontFactory.getFont(FontFactory.HELVETICA, 9);
        String path = "D:\\PUNGRAIN REPORTS\\PG39A";
        File pathAsFile = new File(path);
        path = pathfile(path);
        float[] doc_width = {1, 1, 1, 1, 1, 1, 1};
        Document doc = new Document(PageSize.A4, 5, 5, 5, 5);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nPG39A", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        heading.setSpacingAfter(10);
        PdfPTable heading1 = new PdfPTable(3); // MANDI DATE CROP YEAR
        PdfPCell cell = new PdfPCell(new Phrase("MANDI: " + mandi));
        PdfPCell cell1 = new PdfPCell(new Phrase("MONTH: " + ym));
        PdfPCell cell2 = new PdfPCell(new Phrase("CROP_YEAR: " + crop_year));
        cell.setBorder(PdfPCell.NO_BORDER);
        cell1.setBorder(PdfPCell.NO_BORDER);
        cell2.setBorder(PdfPCell.NO_BORDER);
        cell.setHorizontalAlignment(PdfPCell.ALIGN_LEFT);
        cell1.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);
        cell2.setHorizontalAlignment(PdfPCell.ALIGN_RIGHT);
        heading1.addCell(cell);
        heading1.addCell(cell1);
        heading1.addCell(cell2);
        heading1.setSpacingAfter(5);

        PdfPTable pg39a = new PdfPTable(doc_width);
        pg39a.setWidthPercentage(80);
        pg39a.setSpacingAfter(15);
        pg39a.addCell("DATE");
        pg39a.addCell("OPENING BALANCE");
        pg39a.addCell("RECIEVED");
        pg39a.addCell("TOTAL");
        pg39a.addCell("OPENED BAILS");
        pg39a.addCell("ISSUED TO OTHER CENTRE");
        pg39a.addCell("CLOSING BALANCE");

        PdfPCell date = new PdfPCell();
        PdfPCell ob = new PdfPCell();
        PdfPCell rec = new PdfPCell();
        PdfPCell total = new PdfPCell();
        PdfPCell openbale = new PdfPCell();
        PdfPCell other = new PdfPCell();
        PdfPCell cb = new PdfPCell();
        int op_b = 0;
        int rec_b = 0;
        int total_b = 0;
        int opn_b = 0;
        int other_b = 0;
        int cb_b = 0;
        for (int i = 0; i < table_pg4.getRowCount(); i++) {

            rec_b = rec_b + Integer.valueOf(table_pg4.getValueAt(i, 2).toString());
            opn_b = opn_b + Integer.valueOf(table_pg4.getValueAt(i, 4).toString());
            other_b = other_b + Integer.valueOf(table_pg4.getValueAt(i, 5).toString());
            date.setHorizontalAlignment(Element.ALIGN_CENTER);
            ob.setHorizontalAlignment(Element.ALIGN_CENTER);
            rec.setHorizontalAlignment(Element.ALIGN_CENTER);
            total.setHorizontalAlignment(Element.ALIGN_CENTER);
            openbale.setHorizontalAlignment(Element.ALIGN_CENTER);
            other.setHorizontalAlignment(Element.ALIGN_CENTER);
            cb.setHorizontalAlignment(Element.ALIGN_CENTER);

            date.addElement(new Phrase(table_pg4.getValueAt(i, 0).toString(), font));
            ob.addElement(new Phrase(table_pg4.getValueAt(i, 1).toString(), font));
            rec.addElement(new Phrase(table_pg4.getValueAt(i, 2).toString(), font));
            total.addElement(new Phrase(table_pg4.getValueAt(i, 3).toString(), font));
            openbale.addElement(new Phrase(table_pg4.getValueAt(i, 4).toString(), font));
            other.addElement(new Phrase(table_pg4.getValueAt(i, 5).toString(), font));
            cb.addElement(new Phrase(table_pg4.getValueAt(i, 6).toString(), font));
            date.setFixedHeight(8f);
            //   ob.setFixedHeight(60);
            // rec.setFixedHeight(70);
            //  total.setFixedHeight(80);

            pg39a.addCell(date);
            pg39a.addCell(ob);
            pg39a.addCell(rec);
            pg39a.addCell(total);
            pg39a.addCell(openbale);
            pg39a.addCell(other);
            pg39a.addCell(cb);
            date = new PdfPCell();
            ob = new PdfPCell();
            rec = new PdfPCell();
            total = new PdfPCell();
            openbale = new PdfPCell();
            other = new PdfPCell();
            cb = new PdfPCell();
        }
        op_b = Integer.valueOf(table_pg4.getValueAt(0, 1).toString());
        total_b = op_b + rec_b;
        cb_b = total_b - (opn_b + other_b);

        float[] width = {4, 1};
        PdfPTable summary = new PdfPTable(width);
        summary.setHorizontalAlignment(Element.ALIGN_CENTER);
        summary.setWidthPercentage(38);

        ob = new PdfPCell();
        ob.addElement(new Phrase("OPENING BALANCE", font));
        ob.addElement(new Phrase("RECIEVED BALES", font));
        ob.addElement(new Phrase("TOTAL BALES", font));
        ob.addElement(new Phrase("OPENED BALES", font));
        ob.addElement(new Phrase("ISSUED TO OTHER CENTRE", font));
        ob.addElement(new Phrase("CLOSING BALANCE", font));

        summary.addCell(ob);
        ob = new PdfPCell();
        ob.addElement(new Phrase(String.valueOf(op_b), font));
        ob.addElement(new Phrase(String.valueOf(rec_b), font));
        ob.addElement(new Phrase(String.valueOf(total_b), font));
        ob.addElement(new Phrase(String.valueOf(opn_b), font));
        ob.addElement(new Phrase(String.valueOf(other_b), font));
        ob.addElement(new Phrase(String.valueOf(cb_b), font));

        summary.addCell(ob);
        // rec = new PdfPCell();
        // total = new PdfPCell();
        //openbale = new PdfPCell();
        //  other = new PdfPCell();
        //  cb = new PdfPCell();
        // ob.

        PdfPTable stamp = new PdfPTable(1);
        stamp.setSpacingBefore(20);
        PdfPCell stp = new PdfPCell(new Phrase("INSPECTOR PUNGRAIN", FontFactory.getFont(FontFactory.HELVETICA, 10)));
        PdfPCell stp1 = new PdfPCell(new Phrase("MANDI: " + mandi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
        stp.setBorder(PdfPCell.NO_BORDER);
        stp1.setBorder(PdfPCell.NO_BORDER);
        stp.setHorizontalAlignment(Element.ALIGN_LEFT);
        stp1.setHorizontalAlignment(Element.ALIGN_LEFT);
        stamp.addCell(stp);
        stamp.addCell(stp1);
        stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
        stamp.setWidthPercentage(30);

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            doc.add(heading);
            doc.add(heading1);
            doc.add(pg39a);
            doc.add(summary);
            doc.add(stamp);
            JOptionPane.showMessageDialog(null, "PDF CREATED");
            doc.close();
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        // TODO add your handling code here:

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg39aActionPerformed

    private void btn_pg86ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg86ActionPerformed
        /*     ArrayList<String> dates = new ArrayList<String>();
        Font font = FontFactory.getFont(FontFactory.HELVETICA, 11);
        String path = "D:\\PUNGRAIN REPORTS\\PG86";
        File pathAsFile = new File(path);
        path = pathfile(path);
        //  float[] doc_width = {1, 1, 1, 1, 1, 1, 1};
        Document doc = new Document(PageSize.A4, 5, 5, 10, 10);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nPG86", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        heading.setSpacingAfter(10);
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            ResultSet rs = pg86dates();
            while (rs.next()) {
                dates.add(rs.getString(1));
            }
            for (int i = 0; i < dates.size(); i++) {
                float[] width = {3, 1, 1};
                PdfPTable lift = new PdfPTable(width);
                lift.addCell("GODOWN");
                lift.addCell("BAGS");
                lift.addCell("WEIGHT");
                CallableStatement smt = null;
                smt = pg86(dates.get(i));
                ResultSet res = pg86_lifting(dates.get(i));
                while (res.next()) {
                    lift.addCell(new PdfPCell(new Phrase(res.getString(1))));
                    lift.addCell(new PdfPCell(new Phrase(res.getString(2))));
                    lift.addCell(new PdfPCell(new Phrase(res.getString(3))));
                }
                PdfPTable heading1 = new PdfPTable(3); // MANDI DATE CROP YEAR
                PdfPCell cell = new PdfPCell(new Phrase("MANDI: " + mandi));
                PdfPCell cell1 = new PdfPCell(new Phrase("DATE: " + dates.get(i)));
                PdfPCell cell2 = new PdfPCell(new Phrase("CROP_YEAR: " + crop_year));
                cell.setBorder(PdfPCell.NO_BORDER);
                cell1.setBorder(PdfPCell.NO_BORDER);
                cell2.setBorder(PdfPCell.NO_BORDER);
                cell.setHorizontalAlignment(PdfPCell.ALIGN_LEFT);
                cell1.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);
                cell2.setHorizontalAlignment(PdfPCell.ALIGN_RIGHT);
                heading1.addCell(cell);
                heading1.addCell(cell1);
                heading1.addCell(cell2);
                heading1.setSpacingAfter(10);
                PdfPTable data = new PdfPTable(1);
                List list = new List(List.ORDERED);
                list.add(new ListItem("TOTAL PURCHASE IN MANDI:  " + smt.getString(3) + "  BAGS/  " + smt.getString(4) + "  QTL", font));
                list.add(new ListItem("TOTAL BARDANA RECIEVED IN MANDI:  " + smt.getString(5) + "  BALES/  " + smt.getString(6) + "  LOOSE", font));
                list.add(new ListItem("TOTAL BARDANA ISSUED TO AARTHIA FOR PURCHASE IN MANDI:  " + smt.getString(3) + "  BAGS  ", font));
                list.add(new ListItem("TOTAL LIFTING IN MANDI:  " + smt.getString(7) + "  BAGS/  " + smt.getString(8) + "  QTL ", font));
                list.add(new ListItem("DETAILS AS UNDER:", font));
                PdfPCell cel = new PdfPCell();
                cel.addElement(list);
                data.addCell(cel);
                PdfPTable stamp = new PdfPTable(1);
                stamp.setSpacingBefore(30);
                PdfPCell stp = new PdfPCell(new Phrase("INSPECTOR PUNGRAIN", FontFactory.getFont(FontFactory.HELVETICA, 10)));
                PdfPCell stp1 = new PdfPCell(new Phrase("MANDI: " + mandi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                stp.setBorder(PdfPCell.NO_BORDER);
                stp1.setBorder(PdfPCell.NO_BORDER);
                stp.setHorizontalAlignment(Element.ALIGN_LEFT);
                stp1.setHorizontalAlignment(Element.ALIGN_LEFT);
                stamp.addCell(stp);
                stamp.addCell(stp1);
                stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
                stamp.setWidthPercentage(30);
                doc.newPage();
                doc.add(heading);
                doc.add(heading1);
                doc.add(data);
                doc.add(lift);
                doc.add(stamp);

            }

            //   doc.add(summary);
            JOptionPane.showMessageDialog(null, "PDF CREATED");
            doc.close();
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg86ActionPerformed

    private void jButton43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton43ActionPerformed
        /*       if (dt_pg4.getDate() == null || cb_pg.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE SELECT DATE AND FILLING");
        } else {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            String date = sdf.format(dt_pg4.getDate());
            SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
            String dt = sf.format(dt_pg4.getDate());
            Font font = FontFactory.getFont(FontFactory.HELVETICA, 10);
            String path = "D:\\PUNGRAIN REPORTS\\PG9";
            path = pathfile(path);
            float[] doc_width = {3, 2, 2, 2, 4, 2, 2, 2};
            Document doc = new Document(PageSize.A4.rotate(), 5, 5, 8, 8);
            Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nSTOCK REPORT", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
            heading.setAlignment(Element.ALIGN_CENTER);
            heading.setSpacingAfter(10);
            PdfPTable heading1 = new PdfPTable(3);
            heading1.addCell(new PdfPCell(new Phrase("MANDI: " + mandi, font)));
            heading1.addCell(new PdfPCell(new Phrase("DATE: " + dt, font)));
            heading1.addCell(new PdfPCell(new Phrase("CROP_YEAR: " + crop_year, font)));
            PdfPTable data = new PdfPTable(doc_width);
            data.setWidthPercentage(100);
            data.addCell("DETAILS");
            data.addCell("BEFORE 1ST APRIL");
            data.addCell("TODAY");
            data.addCell("TILL DATE");
            data.addCell("DISPATCH");
            data.addCell("BEFORE 1ST APRIL");
            data.addCell("TODAY");
            data.addCell("TILL DATE");
            PdfPCell detail = new PdfPCell();
            detail.addElement(new Phrase("OPENING BALANCE FROM 1ST APRIL\n\nBALANCE IN HAND\n\nSTORAGE\n\nPURCHASE RECIEPT\n\nPURCHASES\n\nTRANSFER TO OTHER CENTRE\n\nEXCESS\n\nSHORTAGE DURING LOADING\n\nTOTAL", font));
            PdfPCell pur_pre = new PdfPCell();
            PdfPCell pur_today = new PdfPCell();
            PdfPCell pur_total = new PdfPCell();
            PdfPCell dispatch_godwn = new PdfPCell();
            PdfPCell dis_pre = new PdfPCell();
            PdfPCell dis_today = new PdfPCell();
            PdfPCell dis_total = new PdfPCell();
            PdfPTable balance = new PdfPTable(1);
            balance.setHorizontalAlignment(Element.ALIGN_RIGHT);
            balance.setWidthPercentage(30);
            balance.setSpacingAfter(30);
            PdfPTable stamp = new PdfPTable(1);
            stamp.addCell(new PdfPCell(new Phrase("INSPECTOR PUNGRAIN\nMANDI: " + mandi, font)));
            stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
            stamp.setWidthPercentage(30);
            List dispatch_godown = new List(List.ORDERED);
            dispatch_godown.setFirst(1);
            List dispatch_previous = new List();
            List dispatch_today = new List();
            List dispatch_total = new List();
            int total_lift_bags = 0;
            float total_lift_wt = 0;

            CallableStatement smt = null;

            try {
                ArrayList<String> godown = new ArrayList<String>();
                pg9 obj = new pg9();
                smt = obj.pg9_purchase(date, season_id, cb_pg.getSelectedItem().toString());
                godown = obj.pg9_godownlist(date, season_id, cb_pg.getSelectedItem().toString());
                pur_pre.addElement(new Phrase(smt.getString(4) + "    BAGS " + smt.getString(5) + " QTL", font));
                pur_today.addElement(new Phrase(smt.getString(6) + "    BAGS " + smt.getString(7) + " QTL", font));
                pur_total.addElement(new Phrase(smt.getString(8) + "    BAGS " + smt.getString(9) + " QTL", font));
                int total_pur_bags = smt.getInt(8);
                float total_pur_qtl = smt.getFloat(9);

                for (int i = 0; i < godown.size(); i++) {
                    String god = godown.get(i);
                    smt = null;
                    smt = obj.pg9_lifting(date, season_id, cb_pg.getSelectedItem().toString(), god);
                    dispatch_godown.add(new ListItem(god, font));
                    dis_pre.addElement(new Phrase(smt.getString(5) + " BAGS " + smt.getString(6) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(7) + " BAGS " + smt.getString(8) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(9) + " BAGS " + smt.getString(10) + " QTL", font));

                }

                dispatch_godown.add(new ListItem("TOTAL", font));
                dispatch_godwn.addElement(dispatch_godown);

                dis_pre.addElement(new Phrase(smt.getString(11) + " BAGS " + smt.getString(12) + " QTL", font));
                dis_today.addElement(new Phrase(smt.getString(13) + " BAGS " + smt.getString(14) + " QTL", font));
                dis_total.addElement(new Phrase(smt.getString(15) + " BAGS " + smt.getString(16) + " QTL", font));
                int bal_bags = total_pur_bags - smt.getInt(15);
                float bal_wt = total_pur_qtl - smt.getInt(16);
                balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + bal_bags + " BAGS " + bal_wt + " QTL", font)));

                data.addCell(detail);
                data.addCell(pur_pre);
                data.addCell(pur_today);
                data.addCell(pur_total);
                data.addCell(dispatch_godwn);
                data.addCell(dis_pre);
                data.addCell(dis_today);
                data.addCell(dis_total);
                PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
                doc.open();
                doc.add(heading);
                doc.add(heading1);
                doc.add(data);
                doc.add(balance);
                doc.add(stamp);
                JOptionPane.showMessageDialog(null, "PDF CREATED");
                doc.close();
            } catch (FileNotFoundException ex) {
                //  Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                // Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }       */ // TODO add your handling code here:
    }//GEN-LAST:event_jButton43ActionPerformed

    private void jButton45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton45ActionPerformed
        /*      SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        ArrayList<String> dates = new ArrayList<String>();
        ArrayList<String> godown = new ArrayList<String>();
        Font font = FontFactory.getFont(FontFactory.HELVETICA, 10);
        String path = "D:\\PUNGRAIN REPORTS\\PG9";
        path = pathfile(path);
        float[] doc_width = {3, 2, 2, 2, 4, 2, 2, 2};
        Document doc = new Document(PageSize.A4.rotate(), 5, 5, 8, 8);
        Paragraph heading = new Paragraph("PUNJAB STATE GRAIN PROCUREMENT CORPORATION LIMITED\nSTOCK REPORT", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Font.UNDERLINE, BaseColor.BLACK));
        heading.setAlignment(Element.ALIGN_CENTER);
        heading.setSpacingAfter(10);
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + ".pdf"));
            doc.open();
            pg9 obj = new pg9();

            ResultSet rs = obj.complete_pg9dates(season_id, cb_pg.getSelectedItem().toString());
            while (rs.next()) {
                dates.add(rs.getString(1));
            }
            for (int i = 0; i < dates.size(); i++) {
                godown.clear();
                PdfPTable heading1 = new PdfPTable(3);
                heading1.addCell(new PdfPCell(new Phrase("MANDI: " + mandi, font)));
                heading1.addCell(new PdfPCell(new Phrase("DATE: " + dates.get(i), font)));
                heading1.addCell(new PdfPCell(new Phrase("CROP_YEAR: " + crop_year, font)));
                PdfPTable data = new PdfPTable(doc_width);
                data.setWidthPercentage(100);
                data.addCell("DETAILS");
                data.addCell("BEFORE 1ST APRIL");
                data.addCell("TODAY");
                data.addCell("TILL DATE");
                data.addCell("DISPATCH");
                data.addCell("BEFORE 1ST APRIL");
                data.addCell("TODAY");
                data.addCell("TILL DATE");
                PdfPCell detail = new PdfPCell();
                PdfPCell pur_pre = new PdfPCell();
                PdfPCell pur_today = new PdfPCell();
                PdfPCell pur_total = new PdfPCell();
                PdfPCell dispatch_godwn = new PdfPCell();
                PdfPCell dis_pre = new PdfPCell();
                PdfPCell dis_today = new PdfPCell();
                PdfPCell dis_total = new PdfPCell();
                detail.addElement(new Phrase("OPENING BALANCE FROM 1ST APRIL\n\nBALANCE IN HAND\n\nSTORAGE\n\nPURCHASE RECIEPT\n\nPURCHASES\n\nTRANSFER TO OTHER CENTRE\n\nEXCESS\n\nSHORTAGE DURING LOADING\n\nTOTAL", font));
                PdfPTable balance = new PdfPTable(1);
                balance.setHorizontalAlignment(Element.ALIGN_RIGHT);
                balance.setWidthPercentage(30);
                balance.setSpacingAfter(30);
                PdfPTable stamp = new PdfPTable(1);
                stamp.addCell(new PdfPCell(new Phrase("INSPECTOR PUNGRAIN\nMANDI: " + mandi, font)));
                stamp.setHorizontalAlignment(Element.ALIGN_RIGHT);
                stamp.setWidthPercentage(30);

                List dispatch_godown = new List(List.ORDERED);
                dispatch_godown.setFirst(1);
                List dispatch_previous = new List();
                List dispatch_today = new List();
                List dispatch_total = new List();
                CallableStatement smt = null;
                smt = obj.pg9_purchase(dates.get(i), season_id, cb_pg.getSelectedItem().toString());
                pur_pre.addElement(new Phrase(smt.getString(4) + "    BAGS " + smt.getString(5) + " QTL", font));
                pur_today.addElement(new Phrase(smt.getString(6) + "    BAGS " + smt.getString(7) + " QTL", font));
                pur_total.addElement(new Phrase(smt.getString(8) + "    BAGS " + smt.getString(9) + " QTL", font));
                int total_pur_bags = smt.getInt(8);
                float total_pur_qtl = smt.getFloat(9);

                godown = obj.pg9_godownlist(dates.get(i), season_id, cb_pg.getSelectedItem().toString());

                for (int j = 0; j < godown.size(); j++) {
                    smt = null;
                    String god = godown.get(j);
                    smt = obj.pg9_lifting(dates.get(i), season_id, cb_pg.getSelectedItem().toString(), god);
                    dispatch_godown.add(new ListItem(god, font));
                    dis_pre.addElement(new Phrase(smt.getString(5) + " BAGS " + smt.getString(6) + " QTL", font));
                    dis_today.addElement(new Phrase(smt.getString(7) + " BAGS " + smt.getString(8) + " QTL", font));
                    dis_total.addElement(new Phrase(smt.getString(9) + " BAGS " + smt.getString(10) + " QTL", font));
                }
                dispatch_godown.add(new ListItem("TOTAL", font));
                dispatch_godwn.addElement(dispatch_godown);

                dis_pre.addElement(new Phrase(smt.getString(11) + " BAGS " + smt.getString(12) + " QTL", font));
                dis_today.addElement(new Phrase(smt.getString(13) + " BAGS " + smt.getString(14) + " QTL", font));
                dis_total.addElement(new Phrase(smt.getString(15) + " BAGS " + smt.getString(16) + " QTL", font));
                int bal_bags = total_pur_bags - smt.getInt(15);
                float bal_wt = total_pur_qtl - smt.getInt(16);
                balance.addCell(new PdfPCell(new Phrase("BALANCE IN MANDI:  " + bal_bags + " BAGS " + bal_wt + " QTL", font)));

                data.addCell(detail);
                data.addCell(pur_pre);
                data.addCell(pur_today);
                data.addCell(pur_total);
                data.addCell(dispatch_godwn);
                data.addCell(dis_pre);
                data.addCell(dis_today);
                data.addCell(dis_total);

                doc.newPage();
                doc.add(heading);
                doc.add(heading1);
                doc.add(data);
                doc.add(balance);
                doc.add(stamp);
                //         JOptionPane.showMessageDialog(null, dates.size() + "  done" + i);
                //    int done = i + 1;
                /// lbl.setText("TOTAL PAGES  " + dates.size() + "PCURRENT PAGE  " + done);
            }
            JOptionPane.showMessageDialog(null, "PDF CREATED");
            doc.close();
        } catch (FileNotFoundException ex) {
            // Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            //Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main_page.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton45ActionPerformed

    private void jButton46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton46ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton46ActionPerformed

    private void btn_pg4_date1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg4_date1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg4_date1ActionPerformed

    private void btn_pg4_complete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg4_complete1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg4_complete1ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void btn_pg9_complete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg9_complete1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg9_complete1ActionPerformed

    private void btn_pg9_monthly1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg9_monthly1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg9_monthly1ActionPerformed

    private void btn_pg40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg40ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg40ActionPerformed

    private void btn_pg39a1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg39a1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg39a1ActionPerformed

    private void btn_pg87ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pg87ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_pg87ActionPerformed

    private void jButton47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton47ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton47ActionPerformed

    private void jButton48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton48ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton48ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_page().setVisible(true);
            }
        });
    }

    public void clr_flds() {
        dt_date.setDate(null);
        cb_bardana_type.setSelectedIndex(0);
        cb_firm_name.setSelectedIndex(0);
        txt_bags.setText("");
        txt_weight.setText("");
        txt_bales.setText("");
        txt_loose.setText("");
        txt_truck_no.setText("");
        cb_godown.setSelectedIndex(0);
    }

    public void hide_all() {

        lbl_date.setVisible(false);
        lbl_bardana_type.setVisible(false);
        lbl_firm_name.setVisible(false);
        lbl_bags.setVisible(false);
        lbl_bales.setVisible(false);
        lbl_weight.setVisible(false);
        lbl_loose.setVisible(false);
        lbl_truck_no.setVisible(false);
        lbl_godown_name.setVisible(false);

        dt_date.setVisible(false);
        cb_bardana_type.setVisible(false);
        cb_firm_name.setVisible(false);
        txt_bags.setVisible(false);
        txt_bales.setVisible(false);
        txt_weight.setVisible(false);
        txt_loose.setVisible(false);
        txt_truck_no.setVisible(false);
        cb_godown.setVisible(false);
        bg_report.clearSelection();
        panel_date.setVisible(false);
        panel_firm.setVisible(false);
        table_data_entry.setVisible(false);
    }

    public void purchase_menu() {
        hide_all();
        clr_flds();
        lbl_date.setVisible(true);
        lbl_bardana_type.setVisible(true);
        lbl_firm_name.setVisible(true);
        lbl_bags.setVisible(true);
        lbl_weight.setVisible(true);

        dt_date.setVisible(true);
        cb_bardana_type.setVisible(true);
        cb_firm_name.setVisible(true);
        txt_bags.setVisible(true);
        txt_weight.setVisible(true);
        lbl_entry_header.setText("New Purchase Entry");

    }

    public void lifting_menu() {

        //    hide_all();
        hide_all();
        clr_flds();

        lbl_date.setVisible(true);
        lbl_bardana_type.setVisible(true);
        lbl_firm_name.setVisible(true);
        lbl_bags.setVisible(true);
        lbl_weight.setVisible(true);
        lbl_loose.setVisible(true);
        lbl_truck_no.setVisible(true);
        lbl_godown_name.setVisible(true);

        dt_date.setVisible(true);
        cb_bardana_type.setVisible(true);
        cb_firm_name.setVisible(true);
        txt_bags.setVisible(true);
        txt_weight.setVisible(true);
        txt_loose.setVisible(true);

        txt_truck_no.setVisible(true);
        cb_godown.setVisible(true);
        lbl_loose.setText("GATEPASS NO.");
        lbl_truck_no.setText("TRUCK NO.");
        lbl_entry_header.setText("New Lifting Entry");

    }

    public void bardana_rec_menu() {
        hide_all();
        clr_flds();

        lbl_date.setVisible(true);
        lbl_bardana_type.setVisible(true);
        lbl_bales.setVisible(true);
        lbl_loose.setVisible(true);
        lbl_truck_no.setVisible(true);
        dt_date.setVisible(true);
        cb_bardana_type.setVisible(true);
        txt_bales.setVisible(true);
        txt_loose.setVisible(true);
        txt_truck_no.setVisible(true);
        lbl_loose.setText("LOOSE");
        lbl_truck_no.setText("SENDER");
        lbl_entry_header.setText("New Bardana Rec Entry");

    }

    public void bardana_issue_menu() {
        hide_all();
        clr_flds();

        lbl_date.setVisible(true);
        lbl_bardana_type.setVisible(true);
        lbl_firm_name.setVisible(true);
        lbl_bales.setVisible(true);
        //   lbl_weight.setVisible(true);
        lbl_loose.setVisible(true);
        //  lbl_truck_no.setVisible(true);
        //    lbl_godown_name.setVisible(true);

        dt_date.setVisible(true);
        cb_bardana_type.setVisible(true);
        cb_firm_name.setVisible(true);
        txt_bales.setVisible(true);
        //    txt_weight.setVisible(true);
        txt_loose.setVisible(true);
        lbl_loose.setText("LOOSE");
        lbl_entry_header.setText("New Bardana_issue Entry");
    }

    public void update_hide_all() {

        //   lbl_update_sno.setVisible(false);
        lbl_update_date.setVisible(false);
        lbl_update_bardana_type.setVisible(false);
        lbl_update_firm_name.setVisible(false);
        lbl_update_bags.setVisible(false);
        lbl_update_bales.setVisible(false);
        lbl_update_weight.setVisible(false);
        lbl_update_loose.setVisible(false);
        lbl_update_truck_no.setVisible(false);
        lbl_update_godown_name.setVisible(false);

        // txt_update_sno.setVisible(false);
        dt_update_date.setVisible(false);
        cb_update_bardana.setVisible(false);
        cb_update_firm.setVisible(false);
        txt_update_bags.setVisible(false);
        txt_update_bales.setVisible(false);
        txt_update_weight.setVisible(false);
        txt_update_loose.setVisible(false);
        txt_update_truck.setVisible(false);
        cb_update_godown.setVisible(false);
    }

    public void update_purchase_visiblity() {

        lbl_update_date.setVisible(true);
        lbl_update_bardana_type.setVisible(true);
        lbl_update_firm_name.setVisible(true);
        lbl_update_bags.setVisible(true);
        lbl_update_weight.setVisible(true);

        dt_update_date.setVisible(true);
        cb_update_bardana.setVisible(true);
        cb_update_firm.setVisible(true);
        txt_update_bags.setVisible(true);
        txt_update_weight.setVisible(true);
        txt_update_bags.setText("BAGS");
        lbl_update_header.setText("Modify Purchase");

    }

    public void update_lifting_visiblity() {
        lbl_update_date.setVisible(true);
        lbl_update_bardana_type.setVisible(true);
        lbl_update_firm_name.setVisible(true);
        lbl_update_bags.setVisible(true);
        lbl_update_weight.setVisible(true);
        lbl_update_loose.setVisible(true);
        lbl_update_truck_no.setVisible(true);
        lbl_update_godown_name.setVisible(true);

        dt_update_date.setVisible(true);
        cb_update_bardana.setVisible(true);
        cb_update_firm.setVisible(true);
        txt_update_bags.setVisible(true);
        txt_update_weight.setVisible(true);
        txt_update_loose.setVisible(true);

        txt_update_truck.setVisible(true);
        cb_update_godown.setVisible(true);

        //   lbl_update_bags.setText("BAGS");
        lbl_update_loose.setText("GATEPASS NO.");
        lbl_update_truck_no.setText("TRUCK NO.");
        lbl_update_header.setText("New Lifting Entry");

    }

    public void update_bardana_recieve_visiblity() {
        lbl_update_date.setVisible(true);
        lbl_update_bardana_type.setVisible(true);
        lbl_update_bales.setVisible(true);
        lbl_update_loose.setVisible(true);
        lbl_update_truck_no.setVisible(true);
        dt_update_date.setVisible(true);
        cb_update_bardana.setVisible(true);
        txt_update_bales.setVisible(true);
        txt_update_loose.setVisible(true);
        txt_update_truck.setVisible(true);
        lbl_update_loose.setText("LOOSE");
        lbl_update_truck_no.setText("SENDER");
        lbl_update_header.setText("New Bardana Rec Entry");

    }

    public void update_bardana_issue_visiblity() {
        lbl_update_date.setVisible(true);
        lbl_update_bardana_type.setVisible(true);
        lbl_update_firm_name.setVisible(true);
        lbl_update_bales.setVisible(true);
        //   lbl_weight.setVisible(true);
        lbl_update_loose.setVisible(true);
        //  lbl_truck_no.setVisible(true);
        //    lbl_godown_name.setVisible(true);

        dt_update_date.setVisible(true);
        cb_update_bardana.setVisible(true);
        cb_update_firm.setVisible(true);
        txt_update_bales.setVisible(true);
        //    txt_weight.setVisible(true);
        txt_update_loose.setVisible(true);

        //  txt_truck_no.setVisible(true);
        //    cb_godown.setVisible(true);
        lbl_update_bags.setText("BALES");
        lbl_update_loose.setText("LOOSE");
        lbl_update_truck_no.setText("SENDER");
        lbl_update_header.setText("New Bardana_issue Entry");

    }

    public void purchase_total() {
        try {
            Connection conn = connectdb.getConn();
            String query = "select COALESCE(sum(purchase_bags),0),COALESCE(sum(purchase_weight),0) from purchase where season_id=? ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                total_purchase_bags = rs.getInt(1);
                total_purchase_weight = rs.getFloat(2);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            //    Logger.getLogger(report_total.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void lifting_total() {
        try {
            Connection conn = connectdb.getConn();
            String query = "select COALESCE(sum(lifting_bags),0),COALESCE(sum(lifting_weight),0) from lifting where season_id=? ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                total_lift_bags = rs.getInt(1);
                total_lift_weight = rs.getFloat(2);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            //   Logger.getLogger(report_total.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void bardana_total() {
        try {
            Connection conn = connectdb.getConn();
            String query = "select COALESCE(sum(bardana_rec_bales),0),COALESCE(sum(bardana_rec_loose),0) from bardana_recieve where season_id=? ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                total_bales = rs.getInt(1);
                total_loose = rs.getInt(2);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            //     Logger.getLogger(report_total.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void total_report() {
        try {
            purchase_total();
            lifting_total();
            bardana_total();

            balance_wheat_bags = total_purchase_bags - total_lift_bags;
            balance_wheat_qtl = total_purchase_weight - total_lift_weight;
            balance_bardana = (total_bales * 500) + total_loose - total_purchase_bags;
            // JOptionPane.showMessageDialog(null, total_purchase_bags );
            //              JOptionPane.showMessageDialog(null, total_lift_bags );

            txt_total_purchase.setText(String.valueOf(total_purchase_bags) + " Bags  /" + String.valueOf(total_purchase_weight) + " Qtl");
            txt_total_lift.setText(String.valueOf(total_lift_bags) + " Bags  /" + String.valueOf(total_lift_weight) + " Qtl");
            txt_total_balance.setText(String.valueOf(balance_wheat_bags) + " Bags  /" + String.valueOf(balance_wheat_qtl) + " Qtl");
            txt_total_bardana.setText(String.valueOf(total_bales) + " Bales  /" + String.valueOf(total_loose) + " Loose");
            txt_total_bar_balance.setText(String.valueOf(balance_bardana) + " Bags");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    public void add_firm() {
        if (txt_name.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Fill All The Options");
        } else {

            try {
                Connection conn = connectdb.getConn();

                String query = "insert into firms (firm_name,season_id) values(?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, txt_name.getText());
                statement.setInt(2, season_id);
                int i = statement.executeUpdate();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "New Firm Added");
                    table_firms();
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void add_godown() {
        if (txt_name.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Fill All The Options");
        } else {

            try {
                Connection conn = connectdb.getConn();
                String query = "insert into godown (godown_name,season_id) values(?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, txt_name.getText());
                statement.setInt(2, season_id);
                int i = statement.executeUpdate();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "RECORD ADDED");
                    table_godown();
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void add_bardana() {

        if (txt_name.getText().equals("")
                || txt_godown.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Fill All The Options");
        } else {

            try {

                Connection conn = connectdb.getConn();
                String query = "insert into bardana (bardana_type,bardana_filling,season_id) values(?,?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, txt_name.getText());
                statement.setString(2, txt_godown.getText());
                statement.setInt(3, season_id);
                int i = statement.executeUpdate();

                if (i > 0) {
                    //     conn.close();
                    JOptionPane.showMessageDialog(null, "Bardana Added");
                    table_bardana();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void insert_purchase() {

        if (dt_date.getDate() == null
                || cb_bardana_type.getSelectedItem().toString().equals("PLEASE SELECT")
                || cb_firm_name.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_bags.getText().equals("")
                || txt_weight.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {

            try {
                Connection conn = connectdb.getConn();
                String query = "insert into purchase (purchase_date,purchase_bardana,purchase_firm,purchase_bags,purchase_weight,season_id) values(?,?,?,?,?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_bardana_type.getSelectedItem().toString());
                statement.setString(3, cb_firm_name.getSelectedItem().toString());
                statement.setString(4, txt_bags.getText());
                statement.setString(5, txt_weight.getText());
                statement.setInt(6, season_id);
                int i = statement.executeUpdate();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "Purchase Added");

                    total_report();

                    clr_flds();
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                try {
                    //   conn.close();
                    // statement.close();
                } catch (Exception e) {
                }
            }

        }

    } // ADD DATA

    public void insert_lifting() {

        if (dt_date.getDate() == null
                || cb_bardana_type.getSelectedItem().toString().equals("PLEASE SELECT")
                || cb_firm_name.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_bags.getText().equals("")
                || txt_weight.getText().equals("")
                || txt_loose.getText().equals("")
                || txt_truck_no.getText().equals("")
                || cb_godown.getSelectedItem().toString().equals("PLEASE SELECT")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {
            try {
                Connection conn = connectdb.getConn();
                String query = "insert into lifting (lifting_date,lifting_bardana,lifting_firm,lifting_bags,lifting_weight,season_id,lifting_gatepass,lifting_truck,lifting_godown) values(?,?,?,?,?,?,?,?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_bardana_type.getSelectedItem().toString());
                statement.setString(3, cb_firm_name.getSelectedItem().toString());
                statement.setString(4, txt_bags.getText());
                statement.setString(5, txt_weight.getText());
                statement.setInt(6, season_id);
                statement.setString(7, txt_loose.getText());
                statement.setString(8, txt_truck_no.getText());
                statement.setString(9, cb_godown.getSelectedItem().toString());
                int i = statement.executeUpdate();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "RECORD ADDED");
                    total_report();
                    clr_flds();
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }

    } // ADD DATA

    public void insert_recieve_bardana() {
        //      Connection conn = null;

        if (dt_date.getDate() == null
                || cb_bardana_type.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_bales.getText().equals("")
                || txt_loose.getText().equals("")
                || txt_truck_no.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {
            try {

                Connection conn = connectdb.getConn();
                String query = "insert into bardana_recieve (bardana_rec_date,bardana_rec_bardana,bardana_rec_sender,bardana_rec_bales,bardana_rec_loose,season_id) values(?,?,?,?,?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_bardana_type.getSelectedItem().toString());
                statement.setString(3, txt_truck_no.getText());
                statement.setString(4, txt_bales.getText());
                statement.setString(5, txt_loose.getText());
                statement.setInt(6, season_id);
                int i = statement.executeUpdate();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "RECORD ADDED");

                    total_report();

                    clr_flds();
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                try {
                    //     conn.close();
                    // statement.close();
                } catch (Exception e) {
                }
            }
        }

    }  // ADD DATA

    public void insert_issue_bardana() {
        if (dt_date.getDate() == null
                || cb_bardana_type.getSelectedItem().toString().equals("PLEASE SELECT")
                || cb_firm_name.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_bales.getText().equals("")
                || txt_loose.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {
            try {
                Connection conn = connectdb.getConn();
                String query = "insert into bardana_issue (bardana_issue_date,bardana_issue_bardana,bardana_issue_firm,bardana_issue_bales,bardana_issue_loose,season_id) values(?,?,?,?,?,?) ";
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_bardana_type.getSelectedItem().toString());
                statement.setString(3, cb_firm_name.getSelectedItem().toString());
                statement.setString(4, txt_bales.getText());
                statement.setString(5, txt_loose.getText());
                statement.setInt(6, season_id);
                int i = statement.executeUpdate();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "RECORD ADDED SUCCESSFULLY");

                    total_report();

                    clr_flds();
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                try {
                    //     conn.close();
                    // statement.close();
                } catch (Exception e) {
                }
            }
        }

    }  // ADD DATA

    public void table_firms() {
        try {
            cb_firm_name.removeAllItems();
            cb_firm_name.addItem("Please Select");
            cb_report_firm.removeAllItems();
            cb_report_firm.addItem("All");
            cb_update_firm.removeAllItems();

            Connection conn = connectdb.getConn();

            String query = "select firm_sno,firm_name from firms where season_id=? order by firm_name ASC ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();

            DefaultTableModel tb = (DefaultTableModel) table_admin.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("S.no");
            tb.addColumn("Firm Name");
            while (rs.next()) {

                Object o[] = {rs.getString(1), rs.getString(2)};
                cb_firm_name.addItem((rs.getString(2)));
                cb_report_firm.addItem((rs.getString(2)));
                cb_update_firm.addItem((rs.getString(2)));

                tb.addRow(o);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    public void table_bardana() {

        try {
            cb_bardana_type.removeAllItems();
            cb_bardana_type.addItem("Please Select");
            cb_report_bardana.removeAllItems();
            cb_report_bardana.addItem("All");
            cb_update_bardana.removeAllItems();
            Connection conn = connectdb.getConn();
            String query = "select bardana_sno,bardana_type,bardana_filling from bardana where season_id=? order by bardana_type";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_admin.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("S.no");
            tb.addColumn("Bardana Type");
            tb.addColumn("Bardana Filling");
            while (rs.next()) {
                Object o[] = {rs.getString(1), rs.getString(2), rs.getString(3)};
                cb_bardana_type.addItem((rs.getString(2)));
                cb_report_bardana.addItem((rs.getString(2)));
                cb_update_bardana.addItem((rs.getString(2)));
                tb.addRow(o);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void table_godown() {

        try {
            cb_godown.removeAllItems();
            cb_godown.addItem("Please Select");
            cb_report_godown.removeAllItems();
            cb_report_godown.addItem("All");
            cb_update_godown.removeAllItems();

            Connection conn = connectdb.getConn();
            String query = "select godown_sno,godown_name from godown where season_id=? order by godown_name ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();

            DefaultTableModel tb = (DefaultTableModel) table_admin.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("S.no");
            tb.addColumn("Godown Name");

            while (rs.next()) {
                Object o[] = {rs.getString(1), rs.getString(2)};
                cb_godown.addItem((rs.getString(2)));
                cb_report_godown.addItem((rs.getString(2)));
                cb_update_godown.addItem((rs.getString(2)));

                tb.addRow(o);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public float load_filling(String bardana) {
        float filling = 0;
        try {
            Connection conn = connectdb.getConn();

            String query = "select  bardana_filling from bardana where season_id=? and bardana_type=? ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            statement.setString(2, bardana);
            ResultSet result = statement.executeQuery();
            if (result.next()) {
                filling = result.getFloat(1);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                //     conn.close();
                // statement.close();
            } catch (Exception e) {
            }
        }
        return filling;
    } // get filling of bardana

    public void update_purchase() {
        if (txt_update_sno.getText().equals("")
                || dt_update_date.getDate() == null
                || cb_update_bardana.getSelectedItem().toString().equals("PLEASE SELECT")
                || cb_update_firm.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_update_bags.getText().equals("")
                || txt_update_weight.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {

            //     int a = JOptionPane.showConfirmDialog(null, "DO YOU WANT TO Update", "Update", JOptionPane.YES_NO_OPTION);
            try {
                String query = "update purchase set purchase_date=?,purchase_bardana=?,purchase_firm=?,purchase_bags=?,purchase_weight=? where  purchase_sno=?";

                Connection conn = connectdb.getConn();
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_update_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_update_bardana.getSelectedItem().toString());
                statement.setString(3, cb_update_firm.getSelectedItem().toString());
                statement.setString(4, txt_update_bags.getText());
                statement.setString(5, txt_update_weight.getText());
                statement.setString(6, txt_update_sno.getText());
                int i = statement.executeUpdate();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "RECORD Updated SUCCESSFULLY");
                    total_report();
                } else {
                    JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void update_lifting() {

        if (txt_update_sno.getText().equals("")
                || dt_update_date.getDate() == null
                || cb_update_bardana.getSelectedItem().toString().equals("PLEASE SELECT")
                || cb_update_firm.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_update_bags.getText().equals("")
                || txt_update_weight.getText().equals("")
                || txt_update_loose.getText().equals("")
                || txt_update_truck.getText().equals("")
                || cb_update_godown.getSelectedItem().toString().equals("PLEASE SELECT")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {
            try {
                String query = "update lifting  set lifting_date=?,lifting_bardana=?,lifting_firm=?,lifting_bags=?,lifting_weight=?,lifting_gatepass=?,lifting_truck=?,lifting_godown=? where lifting_sno=? ";
                Connection conn = connectdb.getConn();
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_update_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_update_bardana.getSelectedItem().toString());
                statement.setString(3, cb_update_firm.getSelectedItem().toString());
                statement.setString(4, txt_update_bags.getText());
                statement.setString(5, txt_update_weight.getText());
                statement.setString(6, txt_update_loose.getText());
                statement.setString(7, txt_update_truck.getText());
                statement.setString(8, cb_update_godown.getSelectedItem().toString());
                statement.setString(9, txt_update_sno.getText());
                int i = statement.executeUpdate();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "RECORD UPDATED SUCCESSFULLY");
                } else {
                    JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }

    }

    public void update_bardana_recieve() {
        if (txt_update_sno.getText().equals("")
                || dt_update_date.getDate() == null
                || cb_update_bardana.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_update_bales.getText().equals("")
                || txt_update_loose.getText().equals("")
                || txt_update_truck.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {
            try {
                String query = "update bardana_recieve set bardana_rec_date=?,bardana_rec_bardana=?,bardana_rec_sender=?,bardana_rec_bales=?,bardana_rec_loose=? where bardana_rec_sno=? ";
                Connection conn = connectdb.getConn();
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_update_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_update_bardana.getSelectedItem().toString());

                statement.setString(3, txt_update_truck.getText());

                statement.setString(4, txt_update_bales.getText());
                statement.setString(5, txt_update_loose.getText());

                statement.setString(6, txt_update_sno.getText());

                int i = statement.executeUpdate();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "RECORD UPDATED SUCCESSFULLY");
                } else {
                    JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);

            }

        }

    }

    public void update_bardana_issue() {

        if (txt_update_sno.getText().equals("")
                || dt_date.getDate() == null
                || cb_update_bardana.getSelectedItem().toString().equals("PLEASE SELECT")
                || txt_update_bales.getText().equals("")
                || txt_update_loose.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
        } else {
            try {
                String query = "update bardana_issue set bardana_issue_date=?,bardana_issue_bardana=?,bardana_issue_firm=?,bardana_issue_bales=?,bardana_issue_loose=? where bardana_issue_sno=? ";
                Connection conn = connectdb.getConn();
                PreparedStatement statement = conn.prepareStatement(query);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(dt_update_date.getDate());
                statement.setString(1, date);
                statement.setString(2, cb_update_bardana.getSelectedItem().toString());
                statement.setString(3, cb_update_firm.getSelectedItem().toString());
                statement.setString(4, txt_update_bales.getText());
                statement.setString(5, txt_update_loose.getText());
                statement.setString(6, txt_update_sno.getText());

                int i = statement.executeUpdate();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "RECORD UPDATED SUCCESSFULLY");
                } else {
                    JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");
            }
        }

    }

    public void update_shortage(int txn) {/*

        if (txt_bags1.getText().equals("")
                || txt_bales1.getText().equals("")
                || txt_loose1.getText().equals("")
                || txt_truck_no1.getText().equals("")) {
//do nothing
            JOptionPane.showMessageDialog(null, "Please Fill All The Details");
        } else {
// add record to database
            try {
                String query = "update shortage set return_bag=?,bags_short=?,cut=?,shortage=? where txn=? ";
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, txt_bags1.getText());
                statement.setString(2, txt_bales1.getText());
                statement.setString(3, txt_loose1.getText());
                statement.setString(4, txt_truck_no1.getText());
                statement.setInt(5, txn);

                int i = statement.executeUpdate();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "RECORD UPDATED SUCCESSFULLY");
                } else {
                    JOptionPane.showMessageDialog(null, "CAN NOT DELETE RECORD");
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "PLEASE FILL ALL THE OPTIONS");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }*/
    }

    public void view_purchase_customize() {

        try {

            String query = "";
            PreparedStatement statement = null;
            Connection conn = connectdb.getConn();

            int firm = 0;
            int bardana = 0;
            if (cb_report_firm.getSelectedItem().toString().equals("All")) {
                firm = 1;
            }
            if (cb_report_bardana.getSelectedItem().toString().equals("All")) {
                bardana = 1;
            }
            if (firm == 1 && bardana == 1) {
                //     JOptionPane.showMessageDialog(null, "All firm All bardana");

                query = "select * from purchase where season_id=?  order by purchase_date ";
                statement = conn.prepareStatement(query);
                statement.setInt(1, season_id);

                //   table_purchase_all();
            } else if (firm == 1 && bardana == 0) {
                query = "select * from purchase where season_id=? and purchase_bardana=? order by purchase_date ";
                statement = conn.prepareStatement(query);
                statement.setInt(1, season_id);
                statement.setString(2, cb_report_bardana.getSelectedItem().toString());
                //   JOptionPane.showMessageDialog(null, "All firm  custom bardana");
            } else if (firm == 0 && bardana == 1) {
                query = "select * from purchase where season_id=? and purchase_firm=? order by purchase_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "custom firm All bardana");
            } else if (firm == 0 && bardana == 0) {
                query = "select * from purchase where season_id=? and purchase_firm=? and purchase_bardana=? order by purchase_date ";
                statement = conn.prepareStatement(query);
                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());
                statement.setString(3, cb_report_bardana.getSelectedItem().toString());
                //    JOptionPane.showMessageDialog(null, "custom firm custom bardana");
            }
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_data_entry.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("S No");
            tb.addColumn("Date");
            tb.addColumn("Firm Name");
            tb.addColumn("Bags");
            tb.addColumn("Weight");
            tb.addColumn("Bardana Type");

            while (rs.next()) {
                Object o[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tb.addRow(o);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void view_lifting_customize() {
        try {
            String query = "";
            PreparedStatement statement = null;
            Connection conn = connectdb.getConn();
            int firm = 0;
            int bardana = 0;
            int godown = 0;
            if (cb_report_firm.getSelectedItem().toString().equals("All")) {
                firm = 1;
            }
            if (cb_report_bardana.getSelectedItem().toString().equals("All")) {
                bardana = 1;
            }
            if (cb_report_godown.getSelectedItem().toString().equals("All")) {
                godown = 1;
            }
            if (firm == 1 && bardana == 1 && godown == 1) {
                //   JOptionPane.showMessageDialog(null, "All firm All bardana All godown");
                query = "select * from lifting where season_id=?  order by lifting_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
            } else if (firm == 1 && bardana == 1 && godown == 0) {
                query = "select * from lifting where season_id=? and lifting_godown=?  order by lifting_date ";
                statement = conn.prepareStatement(query);
                statement.setInt(1, season_id);
                statement.setString(2, cb_report_godown.getSelectedItem().toString());
                //   statement.setString(3, cb_report_bardana.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "All firm  All bardana custom godown");
            } else if (firm == 1 && bardana == 0 && godown == 1) {
                query = "select * from lifting where season_id=? and lifting_bardana=?  order by lifting_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_bardana.getSelectedItem().toString());
                //   statement.setString(3, cb_report_bardana.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "All firm custom bardana All godown");
            } else if (firm == 1 && bardana == 0 && godown == 0) {
                query = "select * from lifting where season_id=? and lifting_bardana=? and lifting_godown=? order by lifting_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_bardana.getSelectedItem().toString());
                statement.setString(3, cb_report_godown.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "all firm custom bardana custom godown");
            } else if (firm == 0 && bardana == 1 && godown == 1) {
                query = "select * from lifting where season_id=? and lifting_firm=? order by lifting_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());
                //    statement.setString(3, cb_report_godown.getSelectedItem().toString());
                //   JOptionPane.showMessageDialog(null, "custom firm all bardana All godown");
            } else if (firm == 0 && bardana == 1 && godown == 0) {
                query = "select * from lifting where season_id=? and lifting_firm=? and lifting_godown=? order by lifting_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());
                statement.setString(3, cb_report_godown.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "custom firm all bardana custom godown");
            } else if (firm == 0 && bardana == 0 && godown == 1) {
                query = "select * from lifting where season_id=? and lifting_firm=? and lifting_bardana=? order by lifting_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());
                statement.setString(3, cb_report_bardana.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "custom firm all bardana All godown");
            } else if (firm == 0 && bardana == 0 && godown == 0) {
                query = "select * from lifting where season_id=? and lifting_firm=? and lifting_bardana=? and lifting_godown=? order by lifting_date ";
                statement = conn.prepareStatement(query);
                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());
                statement.setString(3, cb_report_bardana.getSelectedItem().toString());
                statement.setString(4, cb_report_godown.getSelectedItem().toString());
                //   JOptionPane.showMessageDialog(null, "custom firm custom bardana custom godown");
            }
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_data_entry.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);

            tb.addColumn("S No.");
            tb.addColumn("DATE");
            tb.addColumn("GATEPASS");
            tb.addColumn("AARTHIA NAME");
            tb.addColumn("BAGS");
            tb.addColumn("WEIGHT");
            tb.addColumn("BARDANA TYPE");
            tb.addColumn("TRUCK NO.");
            tb.addColumn("GODOWN");
            while (rs.next()) {
                Object o[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6),
                    rs.getString(7), rs.getString(8), rs.getString(9)};
                tb.addRow(o);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void view_bardana_recieve_customize() {
        try {
            String query = "";
            PreparedStatement statement = null;
            Connection conn = connectdb.getConn();

            int firm = 0;
            int bardana = 0;
            if (cb_report_firm.getSelectedItem().toString().equals("All")) {
                firm = 1;
            }
            if (cb_report_bardana.getSelectedItem().toString().equals("All")) {
                bardana = 1;
            }
            if (firm == 1 && bardana == 1) {
                query = "select * from bardana_recieve where season_id=?  order by bardana_rec_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);

                //   table_purchase_all();
                //  JOptionPane.showMessageDialog(null, "All firm All bardana");
            } else if (firm == 1 && bardana == 0) {
                query = "select * from bardana_recieve where season_id=? and bardana_rec_bardana=? order by bardana_rec_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_bardana.getSelectedItem().toString());
                //  JOptionPane.showMessageDialog(null, "All firm  custom bardana");
            } else if (firm == 0 && bardana == 1) {
                query = "select * from bardana_recieve where season_id=? and bardana_rec_firm=? order by bardana_rec_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_sender.getSelectedItem().toString());

                //    JOptionPane.showMessageDialog(null, "custom firm All bardana");
            } else if (firm == 0 && bardana == 0) {
                query = "select * from bardana_recieve where season_id=? and bardana_rec_firm=? and bardana_rec_bardana=? order by bardana_rec_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_sender.getSelectedItem().toString());

                statement.setString(3, cb_report_bardana.getSelectedItem().toString());

                //     JOptionPane.showMessageDialog(null, "custom firm custom bardana");
            }

            //    statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_data_entry.getModel();

            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("S No");
            tb.addColumn("Date");
            tb.addColumn("Sender");
            tb.addColumn("Bales");
            tb.addColumn("loose");
            tb.addColumn("Bardana Type");

            while (rs.next()) {
                Object o[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tb.addRow(o);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void view_bardana_issue_customize() {
        try {
            String query = "";
            PreparedStatement statement = null;
            Connection conn = connectdb.getConn();

            int firm = 0;
            int bardana = 0;
            if (cb_report_firm.getSelectedItem().toString().equals("All")) {
                firm = 1;
            }
            if (cb_report_bardana.getSelectedItem().toString().equals("All")) {
                bardana = 1;
            }
            if (firm == 1 && bardana == 1) {
                query = "select * from bardana_issue where season_id=?  order by bardana_issue_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);

                //   table_purchase_all();
                //  JOptionPane.showMessageDialog(null, "All firm All bardana");
            } else if (firm == 1 && bardana == 0) {
                query = "select * from bardana_issue where season_id=? and bardana_issue_bardana=? order by bardana_issue_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_bardana.getSelectedItem().toString());
                //    JOptionPane.showMessageDialog(null, "All firm  custom bardana");
            } else if (firm == 0 && bardana == 1) {
                query = "select * from bardana_issue where season_id=? and bardana_issue_firm=? order by bardana_issue_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());

                //   JOptionPane.showMessageDialog(null, "custom firm All bardana");
            } else if (firm == 0 && bardana == 0) {
                query = "select * from bardana_issue where season_id=? and bardana_issue_firm=? and bardana_issue_bardana=? order by bardana_issue_date ";
                statement = conn.prepareStatement(query);

                statement.setInt(1, season_id);
                statement.setString(2, cb_report_firm.getSelectedItem().toString());

                statement.setString(3, cb_report_bardana.getSelectedItem().toString());

                //   JOptionPane.showMessageDialog(null, "custom firm custom bardana");
            }
            //    statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_data_entry.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("S No");
            tb.addColumn("Date");
            tb.addColumn("Sender");
            tb.addColumn("Bales");
            tb.addColumn("loose");
            tb.addColumn("Bardana Type");

            while (rs.next()) {
                Object o[] = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tb.addRow(o);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void load_bardana_rec_sender() {
        try {
            //cb_firm_name.removeAllItems();
            // cb_firm_name.addItem("Please Select");
            cb_report_sender.removeAllItems();
            cb_report_sender.addItem("All");
            Connection conn = connectdb.getConn();
            String query = "select bardana_rec_sender from bardana_recieve where season_id=? ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                cb_report_sender.addItem((rs.getString(1)));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    public void table_pending_lifting() {
        try {
            Connection conn = connectdb.getConn();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String query = "select lifting_sno,lifting_gatepass,lifting_firm,lifting_bags,lifting_bardana,lifting_godown from lifting where season_id=? and lifting_sno not in (select txn_no from shortage) order by lifting_gatepass asc ";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_shortage.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("TXN_NO");
            //  tb.addColumn("DATE");
            tb.addColumn("GATEPASS");
            tb.addColumn("FIRM NAME");
            tb.addColumn("BAGS");
            // tb.addColumn("WEIGHT");
            tb.addColumn("BARDANA TYPE");
            // tb.addColumn("TRUCK NO.");
            tb.addColumn("RECIEVER");
            tb.addColumn("RETURN BAG");
            tb.addColumn("SHORT BAGS");
            tb.addColumn("CUT");
            tb.addColumn("SHORTAGE");
            tb.addColumn("REMARKS");
            while (rs.next()) {
                Object o[] = {rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getInt(4), rs.getString(5), rs.getString(6)};
                tb.addRow(o);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void view_shortage() {
        //  DefaultTableModel tb = new DefaultTableModel();
        try {
            DefaultTableModel tb = (DefaultTableModel) table_shortage.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("GATEPASS");
            tb.addColumn("FIRM NAME");
            tb.addColumn("RETURN BAG");
            tb.addColumn("SHORT BAG");
            tb.addColumn("CUT");
            tb.addColumn("KANDA SHORTAGE");
            //   tb.addColumn("REMARKS");

            //  SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String query = "SELECT lifting.lifting_gatepass, lifting.lifting_firm,shortage.return_bag,shortage.bags_short,shortage.cut,shortage.shortage FROM lifting\n"
                    + "left join shortage  on  lifting.lifting_sno=shortage.txn_no where lifting.season_id=?";
            Connection conn = connectdb.getConn();
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                Object o[] = {rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                tb.addRow(o);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    public void table_pg4() {
        try {
            String query = "select purchase_date,purchase_firm,purchase_bags,purchase_weight,purchase_bardana from purchase where season_id=? and purchase_date=? order by purchase_firm asc,purchase_bardana asc ";
            Connection conn = connectdb.getConn();
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, season_id);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(dt_pg4.getDate());
            statement.setString(2, date);
            ResultSet rs = statement.executeQuery();
            DefaultTableModel tb = (DefaultTableModel) table_pg4.getModel();
            tb.setColumnCount(0);
            tb.setRowCount(0);
            tb.addColumn("DATE");
            tb.addColumn("FIRM NAME");
            tb.addColumn("BAGS");
            tb.addColumn("WEIGHT");
            tb.addColumn("BARDANA TYPE");
            int sum_bag = 0;
            float sum_weight = 0;
            SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
            while (rs.next()) {
                Object o[] = {(rs.getString(1)), rs.getString(2), rs.getInt(3), rs.getFloat(4), rs.getString(5)};
                tb.addRow(o);
                sum_bag = sum_bag + rs.getInt(3);
                sum_weight = sum_weight + rs.getFloat(4);
            }
            lbl_total_pg4.setText("TOTAL PURCHASE: " + sum_bag + "  BAG/ " + sum_weight + "  QTL");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    } // LOAD PG4 IN TABLE

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg_report;
    private javax.swing.JButton btn_add_new_entry;
    private javax.swing.JButton btn_admin_entry;
    private javax.swing.JButton btn_datewise;
    private javax.swing.JButton btn_delete_entry;
    private javax.swing.JButton btn_pg39;
    private javax.swing.JButton btn_pg39a;
    private javax.swing.JButton btn_pg39a1;
    private javax.swing.JButton btn_pg40;
    private javax.swing.JButton btn_pg4_complete;
    private javax.swing.JButton btn_pg4_complete1;
    private javax.swing.JButton btn_pg4_date;
    private javax.swing.JButton btn_pg4_date1;
    private javax.swing.JButton btn_pg86;
    private javax.swing.JButton btn_pg87;
    private javax.swing.JButton btn_pg9_complete;
    private javax.swing.JButton btn_pg9_complete1;
    private javax.swing.JButton btn_pg9_monthly;
    private javax.swing.JButton btn_pg9_monthly1;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> cb_bardana_type;
    private javax.swing.JComboBox<String> cb_firm_name;
    private javax.swing.JComboBox<String> cb_godown;
    private javax.swing.JComboBox<String> cb_pg;
    private javax.swing.JComboBox<String> cb_report_bardana;
    private javax.swing.JComboBox<String> cb_report_firm;
    private javax.swing.JComboBox<String> cb_report_godown;
    private javax.swing.JComboBox<String> cb_report_sender;
    private javax.swing.JComboBox<String> cb_shortage_bardana;
    private javax.swing.JComboBox<String> cb_shortage_firm;
    private javax.swing.JComboBox<String> cb_shortage_godown;
    private javax.swing.JComboBox<String> cb_update_bardana;
    private javax.swing.JComboBox<String> cb_update_firm;
    private javax.swing.JComboBox<String> cb_update_godown;
    private javax.swing.JDialog dialog_admin;
    private javax.swing.JDialog dialog_consolidate;
    private javax.swing.JDialog dialog_pg_doc;
    private javax.swing.JDialog dialog_shortage;
    private javax.swing.JDialog dialog_update;
    private com.toedter.calendar.JDateChooser dt_date;
    private com.toedter.calendar.JDateChooser dt_date_report;
    private com.toedter.calendar.JDateChooser dt_pg4;
    private com.toedter.calendar.JDateChooser dt_update_date;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton43;
    private javax.swing.JButton jButton44;
    private javax.swing.JButton jButton45;
    private javax.swing.JButton jButton46;
    private javax.swing.JButton jButton47;
    private javax.swing.JButton jButton48;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lbl_admin_header;
    private javax.swing.JLabel lbl_bags;
    private javax.swing.JLabel lbl_bales;
    private javax.swing.JLabel lbl_bardana_type;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_entry_header;
    private javax.swing.JLabel lbl_firm_name;
    private javax.swing.JLabel lbl_godown;
    private javax.swing.JLabel lbl_godown_name;
    private javax.swing.JLabel lbl_loose;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_reports;
    public javax.swing.JLabel lbl_total_pg4;
    public javax.swing.JLabel lbl_total_pg5;
    private javax.swing.JLabel lbl_truck_no;
    private javax.swing.JLabel lbl_truck_no4;
    private javax.swing.JLabel lbl_update_bags;
    private javax.swing.JLabel lbl_update_bales;
    private javax.swing.JLabel lbl_update_bardana_type;
    private javax.swing.JLabel lbl_update_date;
    private javax.swing.JLabel lbl_update_firm_name;
    private javax.swing.JLabel lbl_update_godown_name;
    private javax.swing.JLabel lbl_update_header;
    private javax.swing.JLabel lbl_update_loose;
    private javax.swing.JLabel lbl_update_sno;
    private javax.swing.JLabel lbl_update_truck_no;
    private javax.swing.JLabel lbl_update_weight;
    private javax.swing.JLabel lbl_weight;
    private javax.swing.JButton menu_admin;
    private javax.swing.JButton menu_change_mandi;
    private javax.swing.JButton menu_consolidated;
    private javax.swing.JButton menu_firm_reports;
    private javax.swing.JButton menu_issue_bardana;
    private javax.swing.JButton menu_lifting;
    private javax.swing.JButton menu_pg_reports;
    private javax.swing.JButton menu_purchase;
    private javax.swing.JButton menu_rec_bardana;
    private javax.swing.JButton menu_shortage;
    private javax.swing.JButton menu_update;
    private com.toedter.calendar.JMonthChooser mt_month;
    private javax.swing.JPanel panel_admin1;
    private javax.swing.JPanel panel_admin_entry;
    private javax.swing.JPanel panel_data_entry1;
    private javax.swing.JPanel panel_date;
    private javax.swing.JPanel panel_empty;
    private javax.swing.JPanel panel_empty7;
    private javax.swing.JPanel panel_empty8;
    private javax.swing.JPanel panel_firm;
    private javax.swing.JPanel panel_main;
    private javax.swing.JPanel panel_main_empty;
    private javax.swing.JPanel panel_menu;
    private javax.swing.JPanel panel_purchase;
    private javax.swing.JPanel panel_purchase_entry;
    private javax.swing.JPanel panel_radiobutton;
    private javax.swing.JPanel panel_table;
    private javax.swing.JPanel panel_total_detail;
    private javax.swing.JRadioButton rb_datewise;
    private javax.swing.JRadioButton rb_firmwise;
    private javax.swing.JTable table_admin;
    private javax.swing.JTable table_data_entry;
    private javax.swing.JTable table_pg4;
    private javax.swing.JTable table_pg5;
    private javax.swing.JTable table_shortage;
    private javax.swing.JTextField txt_bags;
    private javax.swing.JTextField txt_bales;
    private javax.swing.JTextField txt_godown;
    private javax.swing.JTextField txt_loose;
    private javax.swing.JTextField txt_name;
    public javax.swing.JTextField txt_total_balance;
    public javax.swing.JTextField txt_total_bar_balance;
    public javax.swing.JTextField txt_total_bardana;
    public javax.swing.JTextField txt_total_lift;
    public javax.swing.JTextField txt_total_purchase;
    private javax.swing.JTextField txt_truck_no;
    private javax.swing.JTextField txt_update_bags;
    private javax.swing.JTextField txt_update_bales;
    private javax.swing.JTextField txt_update_loose;
    private javax.swing.JTextField txt_update_sno;
    private javax.swing.JTextField txt_update_truck;
    private javax.swing.JTextField txt_update_weight;
    private javax.swing.JTextField txt_weight;
    private com.toedter.calendar.JYearChooser yr;
    // End of variables declaration//GEN-END:variables
}
